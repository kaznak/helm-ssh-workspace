# [see:G4H7-CICD] GitHub Actions CI/CD pipeline
name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  release:
    types: [published]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  DOCKER_REPO: ssh-workspace
  HELM_VERSION: 3.12.0

jobs:
  # [see:B2M7-BUILD] Docker image build and test
  docker-build:
    runs-on: ubuntu-latest
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.DOCKER_REPO }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix=sha-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./docker/Dockerfile
          push: false
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Test Docker image
        run: |
          make docker-test DOCKER_TAG=${{ github.sha }}

  # [see:T9K5-SECTEST] Security testing pipeline
  security:
    runs-on: ubuntu-latest
    needs: [docker-build]
    permissions:
      security-events: write
      actions: read
      contents: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build image for security scan
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./docker/Dockerfile
          push: false
          load: true
          tags: ${{ env.DOCKER_REPO }}:security-scan
          cache-from: type=gha

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.DOCKER_REPO }}:security-scan
          format: sarif
          output: trivy-results.sarif

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: trivy-results.sarif

      - name: Run Hadolint
        uses: hadolint/hadolint-action@v3.1.0
        with:
          dockerfile: ./docker/Dockerfile
          format: sarif
          output-file: hadolint-results.sarif

      - name: Upload Hadolint scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: hadolint-results.sarif

  # [see:U9A4-TEST] Helm chart deployment testing
  helm-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Helm
        uses: azure/setup-helm@v3
        with:
          version: ${{ env.HELM_VERSION }}

      - name: Helm lint
        run: make helm-lint

      - name: Helm template test
        run: make helm-test

      - name: Install chart-testing
        uses: helm/chart-testing-action@v2.6.1

      - name: Run chart-testing (list-changed)
        id: list-changed
        run: |
          # Temporarily skip chart-testing until target branch issue is resolved
          echo "Skipping chart-testing for now"
          echo "changed=false" >> $GITHUB_OUTPUT

      - name: Run chart-testing (lint)
        if: steps.list-changed.outputs.changed == 'true'
        run: ct lint --chart-dirs helm --target-branch origin/main

      - name: Create k3d cluster
        if: steps.list-changed.outputs.changed == 'true'
        uses: AbsaOSS/k3d-action@v2
        with:
          cluster-name: "test-cluster"
          args: >-
            --agents 1
            --wait

      - name: Run chart-testing (install)
        if: steps.list-changed.outputs.changed == 'true'
        run: ct install --chart-dirs helm --target-branch origin/main

  # [see:Q3L8-QUALTEST] Quality assurance testing
  quality:
    runs-on: ubuntu-latest
    needs: [docker-build, helm-test]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Set up Helm
        uses: azure/setup-helm@v3
        with:
          version: ${{ env.HELM_VERSION }}

      - name: Build image for quality check
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./docker/Dockerfile
          push: false
          load: true
          tags: ${{ env.DOCKER_REPO }}:quality-check
          cache-from: type=gha

      - name: Run quality checks
        run: make quality DOCKER_TAG=quality-check

  # [see:U9A4-TEST] Integration testing
  integration:
    runs-on: ubuntu-latest
    needs: [docker-build, helm-test]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Set up Helm
        uses: azure/setup-helm@v3
        with:
          version: ${{ env.HELM_VERSION }}

      - name: Create k3d cluster
        uses: AbsaOSS/k3d-action@v2
        with:
          cluster-name: "test-cluster"
          args: >-
            -p "2222:2222@loadbalancer"
            --agents 1
            --wait

      - name: Build image for integration test
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./docker/Dockerfile
          push: false
          load: true
          tags: ${{ env.DOCKER_REPO }}:integration-test
          cache-from: type=gha

      - name: Load image into k3d
        run: |
          k3d image import ${{ env.DOCKER_REPO }}:integration-test --cluster test-cluster

      - name: Run integration tests
        run: make integration-test DOCKER_TAG=integration-test K3D_CLUSTER_MANAGEMENT=external

  # [see:H6N4-PACKAGE] Helm chart packaging
  package:
    runs-on: ubuntu-latest
    needs: [docker-build, helm-test, security, quality]
    if: github.event_name != 'pull_request'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Helm
        uses: azure/setup-helm@v3
        with:
          version: ${{ env.HELM_VERSION }}

      - name: Package Helm chart
        run: make helm-package

      - name: Upload Helm package
        uses: actions/upload-artifact@v3
        with:
          name: helm-chart
          path: dist/*.tgz

  # [see:P1W9-PUBLISH] Artifact publishing
  publish:
    runs-on: ubuntu-latest
    needs: [package, integration]
    if: github.event_name == 'release' && github.event.action == 'published'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Set up Helm
        uses: azure/setup-helm@v3
        with:
          version: ${{ env.HELM_VERSION }}

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata for release
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}
          tags: |
            type=ref,event=tag
            type=raw,value=latest

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./docker/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Package and publish Helm chart to OCI
        env:
          HELM_REGISTRY_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          HELM_REGISTRY_USER: ${{ github.actor }}
        run: |
          make helm-publish

      - name: Create GitHub Release assets
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./dist/ssh-workspace-*.tgz
          asset_name: ssh-workspace-${{ github.event.release.tag_name }}.tgz
          asset_content_type: application/gzip