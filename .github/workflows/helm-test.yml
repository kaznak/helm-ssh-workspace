name: Helm Chart Test and Validation

on:
  push:
    branches:
      - main
      - develop
    paths:
      - 'helm/**'
      - 'docker/**'
      - '.github/workflows/helm-test.yml'
  pull_request:
    branches:
      - main
    paths:
      - 'helm/**'
      - 'docker/**'
      - '.github/workflows/helm-test.yml'
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  # Test environment uses local images only
  TEST_IMAGE_NAME: localhost/ssh-workspace
  TEST_IMAGE_TAG: test

jobs:
  prepare:
    name: Prepare Test Environment
    runs-on: ubuntu-latest
    outputs:
      test-image: ${{ env.TEST_IMAGE_NAME }}:${{ env.TEST_IMAGE_TAG }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Check Dockerfile with hadolint
        uses: hadolint/hadolint-action@v3.1.0
        with:
          dockerfile: docker/Dockerfile
          failure-threshold: warning
          config: .hadolint.yaml

      - name: Install Helm
        uses: azure/setup-helm@v4
        with:
          version: '3.12.1'

      - name: Lint Helm Chart
        run: |
          echo "=== Generating SSH test key pair for linting ==="
          ssh-keygen -t ed25519 -f /tmp/test_ssh_key -N "" -C "ci-test@example.com"
          
          echo "=== Linting Helm Chart ==="
          helm lint helm/ssh-workspace \
            --set user.name="testuser" \
            --set "ssh.publicKeys[0]=$(cat /tmp/test_ssh_key.pub)" \
            --set ssh.testKeys.enabled=true \
            --set tests.sshConnectivity.enabled=true \
            --set "ssh.testKeys.keyPairs[0].publicKey=$(cat /tmp/test_ssh_key.pub)" \
            --set "ssh.testKeys.keyPairs[0].privateKey=$(cat /tmp/test_ssh_key)" \
            --debug

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and cache Docker image
        uses: docker/build-push-action@v6
        with:
          context: docker/
          push: false
          tags: ${{ env.TEST_IMAGE_NAME }}:${{ env.TEST_IMAGE_TAG }}
          cache-from: type=gha,scope=ssh-workspace-test
          cache-to: type=gha,mode=max,scope=ssh-workspace-test
          outputs: type=docker,dest=/tmp/ssh-workspace-image.tar

      - name: Upload Docker image artifact
        uses: actions/upload-artifact@v4
        with:
          name: ssh-workspace-image
          path: /tmp/ssh-workspace-image.tar
          retention-days: 1


  test:
    name: Test (${{ matrix.config.name }})
    runs-on: ubuntu-latest
    needs: prepare
    strategy:
      matrix:
        # Full test matrix - all configuration combinations
        config:
          - name: "explicit-std-emptydir"
            permission_strategy: "explicit"
            security_level: "standard" 
            persistence_enabled: "false"
          - name: "explicit-std-persistent"
            permission_strategy: "explicit"
            security_level: "standard"
            persistence_enabled: "true"
          - name: "explicit-high-emptydir"
            permission_strategy: "explicit"
            security_level: "high"
            persistence_enabled: "false"
          - name: "explicit-high-persistent"
            permission_strategy: "explicit"
            security_level: "high"
            persistence_enabled: "true"
          - name: "explicit-basic-emptydir"
            permission_strategy: "explicit"
            security_level: "basic"
            persistence_enabled: "false"
          - name: "explicit-basic-persistent"
            permission_strategy: "explicit"
            security_level: "basic"
            persistence_enabled: "true"
          
      fail-fast: false
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Helm
        uses: azure/setup-helm@v4
        with:
          version: '3.12.1'

      - name: Install yq
        run: |
          sudo wget -qO /usr/local/bin/yq https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64
          sudo chmod +x /usr/local/bin/yq

      - name: Download Docker image artifact
        uses: actions/download-artifact@v4
        with:
          name: ssh-workspace-image
          path: /tmp

      - name: Load Docker image from artifact
        run: |
          echo "Loading Docker image from artifact..."
          docker load -i /tmp/ssh-workspace-image.tar
          docker images | grep ssh-workspace

      - name: Create kind cluster
        uses: helm/kind-action@v1.8.0
        with:
          cluster_name: test-cluster-${{ matrix.config.name }}
          kubectl_version: v1.27.3

      - name: Load test image into kind cluster
        run: |
          # Load the test image into kind cluster for Helm chart testing
          kind load docker-image ${{ env.TEST_IMAGE_NAME }}:${{ env.TEST_IMAGE_TAG }} --name test-cluster-${{ matrix.config.name }} -v 3

      - name: Generate SSH test key pair
        run: |
          echo "=== Generating SSH test key pair ==="
          ssh-keygen -t ed25519 -f /tmp/test_ssh_key -N "" -C "ci-test@example.com"
          
          # Set proper permissions
          chmod 600 /tmp/test_ssh_key
          chmod 644 /tmp/test_ssh_key.pub
          
          # Export keys for use in subsequent steps
          echo "TEST_SSH_PUBLIC_KEY=$(cat /tmp/test_ssh_key.pub)" >> $GITHUB_ENV
          echo "TEST_SSH_PRIVATE_KEY_PATH=/tmp/test_ssh_key" >> $GITHUB_ENV
          
          echo "Generated SSH public key: $(cat /tmp/test_ssh_key.pub)"
          
          echo "üîç Verifying SSH key pair consistency..."
          # Generate public key from private key to verify they match
          DERIVED_PUBLIC_KEY=$(ssh-keygen -y -f /tmp/test_ssh_key)
          ORIGINAL_PUBLIC_KEY=$(cat /tmp/test_ssh_key.pub)
          
          if [ "$DERIVED_PUBLIC_KEY" = "$ORIGINAL_PUBLIC_KEY" ]; then
            echo "‚úÖ SSH key pair validation PASSED - Keys are a matching pair"
            echo "Key fingerprint: $(ssh-keygen -l -f /tmp/test_ssh_key.pub | cut -d' ' -f1-2)"
          else
            echo "‚ùå SSH key pair validation FAILED - Generated keys do NOT match"
            echo "Original public key: $ORIGINAL_PUBLIC_KEY"
            echo "Derived public key: $DERIVED_PUBLIC_KEY"
            exit 1
          fi

      - name: Validate Helm Chart Templates with Kubernetes
        run: |
          # Validate Helm templates using the test image we just built
          helm template test helm/ssh-workspace \
            --set image.repository=${{ env.TEST_IMAGE_NAME }} \
            --set image.tag=${{ env.TEST_IMAGE_TAG }} \
            --set image.pullPolicy=Never \
            --set user.name="testuser" \
            --set "ssh.publicKeys[0]=$TEST_SSH_PUBLIC_KEY" \
            --set ssh.testKeys.enabled=true \
            --set tests.sshConnectivity.enabled=true \
            --set "ssh.testKeys.keyPairs[0].publicKey=$TEST_SSH_PUBLIC_KEY" \
            --set "ssh.testKeys.keyPairs[0].privateKey=$(cat $TEST_SSH_PRIVATE_KEY_PATH)" \
            --set security.permissionStrategy=${{ matrix.config.permission_strategy }} \
            --set security.level=${{ matrix.config.security_level }} \
            --set persistence.enabled=${{ matrix.config.persistence_enabled }} \
            --validate \
            --debug | tee /tmp/full-template-render.yaml
          echo "‚úì Helm template validation with Kubernetes API successful"

      - name: Install Helm Chart
        run: |
          echo "=== Installing Helm Chart: ${{ matrix.config.name }} ==="
          helm install test-${{ matrix.config.name }} helm/ssh-workspace \
            --set image.repository=${{ env.TEST_IMAGE_NAME }} \
            --set image.tag=${{ env.TEST_IMAGE_TAG }} \
            --set image.pullPolicy=Never \
            --set user.name="testuser" \
            --set "ssh.publicKeys[0]=$TEST_SSH_PUBLIC_KEY" \
            --set ssh.testKeys.enabled=true \
            --set tests.sshConnectivity.enabled=true \
            --set "ssh.testKeys.keyPairs[0].publicKey=$TEST_SSH_PUBLIC_KEY" \
            --set "ssh.testKeys.keyPairs[0].privateKey=$(cat $TEST_SSH_PRIVATE_KEY_PATH)" \
            --set security.permissionStrategy=${{ matrix.config.permission_strategy }} \
            --set security.level=${{ matrix.config.security_level }} \
            --set persistence.enabled=${{ matrix.config.persistence_enabled }} \
            --timeout=300s \
            --wait \
            --debug
          echo "‚úì Helm chart installation completed"

      - name: Wait for Pod Readiness
        run: |
          echo "Waiting for SSH workspace pod to be ready..."
          kubectl wait --for=condition=ready pod -l app.kubernetes.io/name=ssh-workspace,app.kubernetes.io/instance=test-${{ matrix.config.name }} --timeout=120s
          echo "‚úÖ Pod is ready"

      - name: Verify SSH Keys in Pod
        run: |
          echo "üîç Verifying SSH keys configuration in pod..."
          
          # Get the pod name
          POD_NAME=$(kubectl get pods -l app.kubernetes.io/name=ssh-workspace,app.kubernetes.io/instance=test-${{ matrix.config.name }} --field-selector=status.phase=Running -o jsonpath='{.items[0].metadata.name}')
          
          if [ -z "$POD_NAME" ]; then
            echo "‚ùå No running SSH workspace pod found"
            exit 1
          fi
          
          echo "Using pod: $POD_NAME"
          
          # Get authorized_keys from pod
          echo "Retrieving authorized_keys from pod..."
          kubectl exec "$POD_NAME" -c ssh-workspace -- cat /home/testuser/.ssh/authorized_keys > /tmp/pod_authorized_keys
          
          # Show what we retrieved
          echo "Retrieved authorized_keys content:"
          cat /tmp/pod_authorized_keys
          
          # Extract public key from our private key for comparison
          echo "üîç Deriving public key from our test private key..."
          DERIVED_PUBLIC_KEY=$(ssh-keygen -y -f /tmp/test_ssh_key)
          
          # Compare with authorized_keys
          if grep -Fq "$DERIVED_PUBLIC_KEY" /tmp/pod_authorized_keys; then
            echo "‚úÖ SSH key verification PASSED - Our private key matches public key in pod's authorized_keys"
            echo "Key fingerprint: $(ssh-keygen -l -f /tmp/test_ssh_key.pub | cut -d' ' -f1-2)"
          else
            echo "‚ùå SSH key verification FAILED - Our private key does NOT match any key in pod's authorized_keys"
            echo "Our derived public key:"
            echo "$DERIVED_PUBLIC_KEY"
            echo "Pod's authorized_keys:"
            cat /tmp/pod_authorized_keys
            exit 1
          fi
          
          # Cleanup
          rm -f /tmp/pod_authorized_keys

      - name: Run Helm Tests
        run: |
          helm test test-${{ matrix.config.name }} --timeout=300s

      - name: Collect Test Pod Logs
        if: always()
        run: |
          echo "=== Collecting logs from test pods ==="
          TEST_PODS=$(kubectl get pods -l "helm.sh/hook=test" -o jsonpath='{.items[*].metadata.name}' 2>/dev/null || echo "")
          
          if [ -z "$TEST_PODS" ]; then
            echo "No test pods found to collect logs from"
          else
            for POD in $TEST_PODS; do
              echo "::group::üìã Logs for pod: $POD"
              kubectl logs "$POD" --all-containers=true --prefix=true || echo "Failed to get logs for $POD"
              echo "::endgroup::"
            done
          fi
          echo "‚úì Test pod logs collection completed"

      - name: Cleanup Test Pods
        if: always()
        run: |
          echo "=== Cleaning up test pods ==="
          kubectl delete pods -l "helm.sh/hook=test" --ignore-not-found=true
          echo "‚úì Test pods cleanup completed"

      - name: Cleanup
        if: always()
        run: |
          echo "=== Cleaning up ==="
          # Clean up SSH test keys
          rm -f $TEST_SSH_PRIVATE_KEY_PATH $TEST_SSH_PRIVATE_KEY_PATH.pub 2>/dev/null || true
          
          helm uninstall test-${{ matrix.config.name }} --debug || true
          echo "=== Final cluster state ==="
          kubectl get all -A | grep test-${{ matrix.config.name }} || echo "No remaining test-${{ matrix.config.name }} resources"

  cleanup:
    name: Cleanup Artifacts
    runs-on: ubuntu-latest
    needs: [prepare, test]
    if: always()
    steps:
      - name: Delete Docker image artifact
        uses: geekyeggo/delete-artifact@v5
        with:
          name: ssh-workspace-image
          failOnError: false
