name: Helm Chart Test and Validation

on:
  push:
    branches:
      - main
      - develop
    paths:
      - 'helm/**'
      - 'docker/**'
      - '.github/workflows/helm-test.yml'
  pull_request:
    branches:
      - main
    paths:
      - 'helm/**'
      - 'docker/**'
      - '.github/workflows/helm-test.yml'
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  # Test environment uses local images only
  TEST_IMAGE_NAME: localhost/ssh-workspace
  TEST_IMAGE_TAG: test

jobs:
  prepare:
    name: Prepare Test Environment
    runs-on: ubuntu-latest
    outputs:
      test-image: ${{ env.TEST_IMAGE_NAME }}:${{ env.TEST_IMAGE_TAG }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Check Dockerfile with hadolint
        uses: hadolint/hadolint-action@v3.1.0
        with:
          dockerfile: docker/Dockerfile
          failure-threshold: warning
          config: .hadolint.yaml

      - name: Install Helm
        uses: azure/setup-helm@v4
        with:
          version: '3.12.1'

      - name: Lint Helm Chart
        run: |
          echo "=== Generating SSH test key pair for linting ==="
          ssh-keygen -t ed25519 -f /tmp/test_ssh_key -N "" -C "ci-test@example.com"
          
          echo "=== Linting Helm Chart ==="
          helm lint helm/ssh-workspace \
            --set user.name="testuser" \
            --set "ssh.publicKeys[0]=$(cat /tmp/test_ssh_key.pub)" \
            --set tests.testKeys.enabled=true \
            --set tests.sshConnectivity.enabled=true \
            --set "tests.testKeys.keyPairs[0].publicKey=$(cat /tmp/test_ssh_key.pub)" \
            --set "tests.testKeys.keyPairs[0].privateKey=$(cat /tmp/test_ssh_key)" \
            --debug

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and cache Docker image
        uses: docker/build-push-action@v6
        with:
          context: docker/
          push: false
          tags: ${{ env.TEST_IMAGE_NAME }}:${{ env.TEST_IMAGE_TAG }}
          cache-from: type=gha,scope=ssh-workspace
          cache-to: type=gha,mode=max,scope=ssh-workspace
          outputs: type=docker,dest=/tmp/ssh-workspace-image.tar

      - name: Upload Docker image artifact
        uses: actions/upload-artifact@v4
        with:
          name: ssh-workspace-image
          path: /tmp/ssh-workspace-image.tar
          retention-days: 1


  test:
    name: Test (${{ matrix.security_level }}-${{ matrix.persistence_enabled }}-${{ matrix.test_key_method }}-${{ matrix.ssh_strict_modes }})
    runs-on: ubuntu-latest
    needs: prepare
    strategy:
      matrix:
        # Auto-generate test matrix from parameter combinations
        security_level: ["basic", "standard", "high"]
        persistence_enabled: ["false", "true"]
        test_key_method: ["keyPairs", "existingSecret"]
        ssh_strict_modes: ["true", "false"]
        exclude:
          # Limit existingSecret tests to reduce CI time
          - security_level: "high"
            test_key_method: "existingSecret"
          - persistence_enabled: "true"
            test_key_method: "existingSecret"
          # Limit strict modes tests to reduce CI time - test with basic security and keyPairs only
          - security_level: "standard"
            ssh_strict_modes: "true"
          - security_level: "high"
            ssh_strict_modes: "true"
          - test_key_method: "existingSecret"
            ssh_strict_modes: "true"
          
      fail-fast: false
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Helm
        uses: azure/setup-helm@v4
        with:
          version: '3.12.1'

      - name: Install yq
        run: |
          sudo wget -qO /usr/local/bin/yq https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64
          sudo chmod +x /usr/local/bin/yq

      - name: Download Docker image artifact
        uses: actions/download-artifact@v4
        with:
          name: ssh-workspace-image
          path: /tmp

      - name: Load Docker image from artifact
        run: |
          echo "Loading Docker image from artifact..."
          docker load -i /tmp/ssh-workspace-image.tar
          docker images | grep ssh-workspace

      - name: Create kind cluster
        uses: helm/kind-action@v1.8.0
        with:
          cluster_name: test-cluster
          kubectl_version: v1.27.3

      - name: Load test image into kind cluster
        run: |
          # Load the test image into kind cluster for Helm chart testing
          kind load docker-image ${{ env.TEST_IMAGE_NAME }}:${{ env.TEST_IMAGE_TAG }} --name test-cluster -v 3

      - name: Generate SSH test key pair
        run: |
          echo "=== Generating SSH test key pair ==="
          ssh-keygen -t ed25519 -f /tmp/test_ssh_key -N "" -C "ci-test@example.com"
          
          # Set proper permissions
          chmod 600 /tmp/test_ssh_key
          chmod 644 /tmp/test_ssh_key.pub
          
          # Export keys for use in subsequent steps
          echo "TEST_SSH_PUBLIC_KEY=$(cat /tmp/test_ssh_key.pub)" >> $GITHUB_ENV
          echo "TEST_SSH_PRIVATE_KEY_PATH=/tmp/test_ssh_key" >> $GITHUB_ENV
          
          echo "::group::üîç Generated Public Key"
          cat /tmp/test_ssh_key.pub
          echo ""
          echo "::endgroup::"
          echo -n "Public key file info: "
          ls -la /tmp/test_ssh_key.pub
          echo -n "File type detection: "
          file /tmp/test_ssh_key.pub

          echo "::group::üîç Generated Private Key"
          cat /tmp/test_ssh_key
          echo ""
          echo "::endgroup::"
          echo -n "Private key file info: "
          ls -la /tmp/test_ssh_key
          echo -n "File type detection: "
          file /tmp/test_ssh_key

          echo "üîç Verifying SSH key pair consistency..."
          # Generate public key from private key to verify they match
          DERIVED_PUBLIC_KEY=$(ssh-keygen -y -f /tmp/test_ssh_key)
          ORIGINAL_PUBLIC_KEY=$(cat /tmp/test_ssh_key.pub)
          
          if [ "$DERIVED_PUBLIC_KEY" = "$ORIGINAL_PUBLIC_KEY" ]; then
            echo "‚úÖ SSH key pair validation PASSED - Keys are a matching pair"
            echo "Key fingerprint: $(ssh-keygen -l -f /tmp/test_ssh_key.pub | cut -d' ' -f1-2)"
          else
            echo "‚ùå SSH key pair validation FAILED - Generated keys do NOT match"
            echo "Original public key: $ORIGINAL_PUBLIC_KEY"
            echo "Derived public key: $DERIVED_PUBLIC_KEY"
            exit 1
          fi

      - name: Create Existing Secret for Test Keys
        if: matrix.test_key_method == 'existingSecret'
        run: |
          echo "=== Creating existing test SSH keys secret ==="
          
          # Create the secret with the test SSH key pair
          kubectl create secret generic test-ssh-keys-external \
            --from-file=private-key-0=/tmp/test_ssh_key \
            --from-file=public-key-0=/tmp/test_ssh_key.pub
          
          echo "‚úÖ External test SSH keys secret created: test-ssh-keys-external"
          
          # Verify the secret was created correctly
          kubectl get secret test-ssh-keys-external -o yaml

      - name: Create Test Values File
        run: |
          echo "::group::üìÑ Generated values.yaml"
          
          if [ "${{ matrix.test_key_method }}" = "existingSecret" ]; then
            # Configuration for existingSecret method
            cat << EOF  | tee /tmp/test-values.yaml 
          image:
            repository: ${{ env.TEST_IMAGE_NAME }}
            tag: ${{ env.TEST_IMAGE_TAG }}
            pullPolicy: Never
          user:
            name: testuser
          ssh:
            publicKeys:
              - $TEST_SSH_PUBLIC_KEY
            strictModes: ${{ matrix.ssh_strict_modes }}
          tests:
            testKeys:
              enabled: true
              existingSecret: test-ssh-keys-external
            sshConnectivity:
              enabled: true
            workspaceFunctionality:
              enabled: true
              networkTest:
                enabled: true
          security:
            level: ${{ matrix.security_level }}
          persistence:
            enabled: ${{ matrix.persistence_enabled }}
          EOF
          else
            # Configuration for keyPairs method
            cat << EOF  | tee /tmp/test-values.yaml 
          image:
            repository: ${{ env.TEST_IMAGE_NAME }}
            tag: ${{ env.TEST_IMAGE_TAG }}
            pullPolicy: Never
          user:
            name: testuser
          ssh:
            publicKeys:
              - $TEST_SSH_PUBLIC_KEY
            strictModes: ${{ matrix.ssh_strict_modes }}
          tests:
            testKeys:
              enabled: true
              keyPairs:
                - publicKey: $TEST_SSH_PUBLIC_KEY
                  privateKey: |
          $(sed 's/^/          /' $TEST_SSH_PRIVATE_KEY_PATH)
            sshConnectivity:
              enabled: true
            workspaceFunctionality:
              enabled: true
              networkTest:
                enabled: true
          security:
            level: ${{ matrix.security_level }}
          persistence:
            enabled: ${{ matrix.persistence_enabled }}
          EOF
          fi
          
          echo "::endgroup::"
          echo "‚úì Test values file created for method: ${{ matrix.test_key_method }}"

      - name: Validate Helm Chart Templates with Kubernetes
        run: |
          # Validate Helm templates using the test image we just built
          helm template test helm/ssh-workspace \
            -f /tmp/test-values.yaml \
            --validate \
            --debug | tee /tmp/full-template-render.yaml
          echo "‚úì Helm template validation with Kubernetes API successful"

      - name: Install Helm Chart
        run: |
          RELEASE_NAME="test-ssh-workspace"
          echo "=== Installing Helm Chart ==="
          helm install "$RELEASE_NAME" helm/ssh-workspace \
            -f /tmp/test-values.yaml \
            --timeout=300s \
            --wait \
            --debug
          echo "‚úì Helm chart installation completed"

      - name: Verify SSH Keys in Service Pod
        run: |
          echo "üîç Verifying SSH keys configuration in pod..."
          RELEASE_NAME="test-ssh-workspace"
          
          # Get the pod name
          POD_NAME=$(kubectl get pods -l app.kubernetes.io/name=ssh-workspace,app.kubernetes.io/instance="$RELEASE_NAME" --field-selector=status.phase=Running -o jsonpath='{.items[0].metadata.name}')
          
          if [ -z "$POD_NAME" ]; then
            echo "‚ùå No running SSH workspace pod found"
            exit 1
          fi
          
          echo "Using pod: $POD_NAME"
          
          # Get authorized_keys from pod
          echo "Retrieving authorized_keys from pod..."
          kubectl exec "$POD_NAME" -c ssh-workspace -- cat /home/testuser/.ssh/authorized_keys > /tmp/pod_authorized_keys
          
          # Show what we retrieved
          echo "Retrieved authorized_keys content:"
          cat /tmp/pod_authorized_keys
          
          # Extract public key from our private key for comparison
          echo "üîç Deriving public key from our test private key..."
          DERIVED_PUBLIC_KEY=$(ssh-keygen -y -f /tmp/test_ssh_key)
          
          # Compare with authorized_keys
          if grep -Fq "$DERIVED_PUBLIC_KEY" /tmp/pod_authorized_keys; then
            echo "‚úÖ SSH key verification PASSED - Our private key matches public key in pod's authorized_keys"
            echo "Key fingerprint: $(ssh-keygen -l -f /tmp/test_ssh_key.pub | cut -d' ' -f1-2)"
          else
            echo "‚ùå SSH key verification FAILED - Our private key does NOT match any key in pod's authorized_keys"
            echo "Our derived public key:"
            echo "$DERIVED_PUBLIC_KEY"
            echo "Pod's authorized_keys:"
            cat /tmp/pod_authorized_keys
            exit 1
          fi
          
          # Cleanup
          rm -f /tmp/pod_authorized_keys

      - name: SSH Connectivity Test (External)
        if: always()
        run: |
          RELEASE_NAME="test-ssh-workspace"
          echo "=== External SSH Connectivity Test ==="
          
          echo "üîç Waiting for pod to be ready..."
          kubectl wait --for=condition=ready pod -l app.kubernetes.io/name=ssh-workspace --timeout=120s
          
          echo "üîç Getting service configuration..."
          SERVICE_PORT=$(kubectl get service "$RELEASE_NAME" -o jsonpath='{.spec.ports[0].port}')
          echo "Service port: $SERVICE_PORT"
          
          echo "üîç Setting up port forward..."
          kubectl port-forward service/"$RELEASE_NAME" 2222:$SERVICE_PORT &
          PORT_FORWARD_PID=$!
          sleep 10
          
          echo "üîç Testing external SSH connection..."
          ssh -i $TEST_SSH_PRIVATE_KEY_PATH \
              -o StrictHostKeyChecking=no \
              -o UserKnownHostsFile=/dev/null \
              -o ConnectTimeout=10 \
              -o BatchMode=yes \
              testuser@localhost -p 2222 \
              'echo "External SSH connection successful!"' || {
            echo "‚ùå External SSH connection failed!"
            
            echo "üîç Running connection failure debugging..."
            echo "Network connectivity test:"
            nc -zv localhost 2222 || echo "Port 2222 not accessible"
            
            echo "Service status:"
            kubectl get service "$RELEASE_NAME" -o wide
            
            # Kill port forward and exit
            kill $PORT_FORWARD_PID 2>/dev/null || true
            exit 1
          }
          
          echo "üîç Cleaning up..."
          # Cleanup
          kill $PORT_FORWARD_PID 2>/dev/null || true
          echo "‚úì External SSH connectivity test completed successfully!"

      - name: Run Helm Tests
        run: |
          RELEASE_NAME="test-ssh-workspace"
          helm test "$RELEASE_NAME" --timeout=300s

      - name: Validate SSH Key Pair in Test Secret
        if: always()
        run: |
          RELEASE_NAME="test-ssh-workspace"
          echo "=== Validating SSH key pair in test secret ==="
          
          # Set correct secret name based on test key method
          if [ "${{ matrix.test_key_method }}" = "existingSecret" ]; then
            SECRET_NAME="test-ssh-keys-external"
          else
            SECRET_NAME="$RELEASE_NAME-test-ssh-keys"
          fi
          
          # Check if secret exists
          if ! kubectl get secret "$SECRET_NAME" >/dev/null 2>&1; then
            echo "‚ùå Test SSH keys secret not found: $SECRET_NAME"
            echo "Available secrets:"
            kubectl get secrets | grep test || echo "No test secrets found"
            exit 1
          fi
          
          echo "‚úì Test SSH keys secret exists: $SECRET_NAME"
          
          # Extract SSH keys from secret
          echo "üîç Extracting SSH keys from secret..."
          SECRET_PRIVATE_KEY=$(kubectl get secret "$SECRET_NAME" -o jsonpath='{.data.private-key-0}' 2>/dev/null || echo "")
          SECRET_PUBLIC_KEY=$(kubectl get secret "$SECRET_NAME" -o jsonpath='{.data.public-key-0}' 2>/dev/null || echo "")
          
          # Check if both keys exist
          if [ -z "$SECRET_PRIVATE_KEY" ] || [ -z "$SECRET_PUBLIC_KEY" ]; then
            echo "‚ùå SSH keys not found in secret"
            echo "Private key present: $([ -n "$SECRET_PRIVATE_KEY" ] && echo 'yes' || echo 'no')"
            echo "Public key present: $([ -n "$SECRET_PUBLIC_KEY" ] && echo 'yes' || echo 'no')"
            exit 1
          fi
          
          echo "‚úì Both private and public keys found in secret"
          
          # Decode private key
          echo "üîç Decoding and validating SSH key pair..."
          if ! echo "$SECRET_PRIVATE_KEY" | base64 -d > /tmp/secret-private-key 2>/dev/null; then
            echo "‚ùå Failed to decode private key from secret"
            exit 1
          fi
          
          echo "‚úì Private key decoded successfully"
          chmod 600 /tmp/secret-private-key
          
          echo "::group::üîç Decoded Private Key Content"
          cat /tmp/secret-private-key
          echo ""
          echo "::endgroup::"
          echo -n "Private key file info: "
          ls -la /tmp/secret-private-key
          echo -n "File type detection: "
          file /tmp/secret-private-key
          
          # Decode public key
          if ! echo "$SECRET_PUBLIC_KEY" | base64 -d > /tmp/secret-public-key 2>/dev/null; then
            echo "‚ùå Failed to decode public key from secret"
            rm -f /tmp/secret-private-key
            exit 1
          fi
          
          echo "‚úì Public key decoded successfully"
          
          echo "::group::üîç Decoded Public Key Content"
          cat /tmp/secret-public-key
          echo ""
          echo "::endgroup::"
          echo -n "Public key file info: "
          ls -la /tmp/secret-public-key
          echo -n "File type detection: "
          file /tmp/secret-public-key
          
          # Generate public key from private key for comparison
          if ! ssh-keygen -y -f /tmp/secret-private-key > /tmp/derived-public-key 2>/dev/null; then
            echo "‚ùå Failed to derive public key from secret's private key - Invalid format"
            rm -f /tmp/secret-private-key /tmp/secret-public-key
            exit 1
          fi
          
          echo "‚úì Successfully derived public key from private key"
          
          # Compare with our test public key
          if [ "$(cat /tmp/derived-public-key)" = "$TEST_SSH_PUBLIC_KEY" ]; then
            echo "‚úÖ SSH key pair validation PASSED - Secret keys match workflow test keys"
            echo "Key fingerprint: $(ssh-keygen -l -f /tmp/secret-private-key 2>/dev/null | cut -d' ' -f1-2)"
          else
            echo "‚ùå SSH key pair validation FAILED - Secret keys do NOT match workflow test keys"
            echo "Expected: $TEST_SSH_PUBLIC_KEY"
            echo "Secret contains: $(cat /tmp/derived-public-key)"
          fi
          
          # Cleanup temporary files
          rm -f /tmp/secret-private-key /tmp/secret-public-key /tmp/derived-public-key

      - name: Collect Pod Logs
        if: always()
        run: |
          RELEASE_NAME="test-ssh-workspace"
          
          echo "=== Collecting logs from service pods ==="
          SERVICE_PODS=$(kubectl get pods -l "app.kubernetes.io/name=ssh-workspace,app.kubernetes.io/instance=$RELEASE_NAME" -o jsonpath='{.items[*].metadata.name}' 2>/dev/null || echo "")
          
          if [ -z "$SERVICE_PODS" ]; then
            echo "No service pods found to collect logs from"
          else
            for POD in $SERVICE_PODS; do
              echo "::group::üìã Service Pod Logs: $POD"
              kubectl logs "$POD" --all-containers=true --prefix=true || echo "Failed to get logs for $POD"
              echo "::endgroup::"
            done
          fi
          
          echo "=== Collecting logs from test pods ==="
          TEST_PODS=$(kubectl get pods -l "app.kubernetes.io/component=test,app.kubernetes.io/instance=$RELEASE_NAME" -o jsonpath='{.items[*].metadata.name}' 2>/dev/null || echo "")
          
          if [ -z "$TEST_PODS" ]; then
            echo "No test pods found to collect logs from"
            echo "Available pods:"
            kubectl get pods -l "app.kubernetes.io/instance=$RELEASE_NAME" 2>/dev/null || echo "No pods found for this release"
          else
            for POD in $TEST_PODS; do
              echo "::group::üìã Test Pod Logs: $POD"
              kubectl logs "$POD" --all-containers=true --prefix=true || echo "Failed to get logs for $POD"
              echo "::endgroup::"
            done
          fi
          echo "‚úì Pod logs collection completed"

      - name: Cleanup Test Pods
        if: always()
        run: |
          echo "=== Cleaning up test pods ==="
          kubectl delete pods -l "helm.sh/hook=test" --ignore-not-found=true
          echo "‚úì Test pods cleanup completed"

      - name: Cleanup
        if: always()
        run: |
          RELEASE_NAME="test-ssh-workspace"
          echo "=== Cleaning up ==="
          # Clean up SSH test keys
          rm -f $TEST_SSH_PRIVATE_KEY_PATH $TEST_SSH_PRIVATE_KEY_PATH.pub 2>/dev/null || true
          
          helm uninstall "$RELEASE_NAME" --debug || true
          echo "=== Final cluster state ==="
          kubectl get all -A | grep "$RELEASE_NAME" || echo "No remaining test resources"

  cleanup:
    name: Cleanup Artifacts
    runs-on: ubuntu-latest
    needs: [prepare, test]
    if: always()
    steps:
      - name: Delete Docker image artifact
        uses: geekyeggo/delete-artifact@v5
        with:
          name: ssh-workspace-image
          failOnError: false
