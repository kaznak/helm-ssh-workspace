name: Helm Chart Test and Validation

on:
  push:
    branches:
      - main
      - develop
    paths:
      - 'helm/**'
      - 'docker/**'
      - '.github/workflows/helm-test.yml'
  pull_request:
    branches:
      - main
    paths:
      - 'helm/**'
      - 'docker/**'
      - '.github/workflows/helm-test.yml'
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  # Test environment uses local images only
  TEST_IMAGE_NAME: localhost/ssh-workspace
  TEST_IMAGE_TAG: test

jobs:
  test:
    name: Test (${{ matrix.config.name }})
    runs-on: ubuntu-latest
    strategy:
      matrix:
        # Test all combinations of permission strategies and security levels
        config:
          - name: "fsgroup-basic"
            permission_strategy: "fsgroup"
            security_level: "basic"
          - name: "explicit-basic"
            permission_strategy: "explicit"
            security_level: "basic"
          - name: "fsgroup-standard"
            permission_strategy: "fsgroup"
            security_level: "standard"
          - name: "explicit-standard"
            permission_strategy: "explicit"
            security_level: "standard"
          - name: "fsgroup-high"
            permission_strategy: "fsgroup"
            security_level: "high"
          - name: "explicit-high"
            permission_strategy: "explicit"
            security_level: "high"
      fail-fast: false
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Generate SSH test key pair
        run: |
          echo "=== Generating SSH test key pair ==="
          ssh-keygen -t ed25519 -f /tmp/test_ssh_key -N "" -C "ci-test@example.com"
          
          # Export keys for use in subsequent steps
          echo "TEST_SSH_PUBLIC_KEY=$(cat /tmp/test_ssh_key.pub)" >> $GITHUB_ENV
          echo "TEST_SSH_PRIVATE_KEY_PATH=/tmp/test_ssh_key" >> $GITHUB_ENV
          
          # Create base64 encoded private key for Helm values
          TEST_SSH_PRIVATE_KEY_B64=$(base64 -w0 /tmp/test_ssh_key)
          echo "TEST_SSH_PRIVATE_KEY_B64=$TEST_SSH_PRIVATE_KEY_B64" >> $GITHUB_ENV
          
          echo "Generated SSH public key: $(cat /tmp/test_ssh_key.pub)"

      - name: Check Dockerfile with hadolint
        uses: hadolint/hadolint-action@v3.1.0
        with:
          dockerfile: docker/Dockerfile
          failure-threshold: warning
          config: .hadolint.yaml

      - name: Install Helm
        uses: azure/setup-helm@v4
        with:
          version: '3.12.1'

      - name: Lint Helm Chart
        run: |
          helm lint helm/ssh-workspace \
            --set user.name="testuser" \
            --set "ssh.publicKeys[0]=$TEST_SSH_PUBLIC_KEY" \
            --set ssh.testKeys.enabled=true \
            --set "ssh.testKeys.keyPairs[0].publicKey=$TEST_SSH_PUBLIC_KEY" \
            --set "ssh.testKeys.keyPairs[0].privateKey=$(cat /tmp/test_ssh_key)" \
            --debug

      - name: Create kind cluster
        uses: helm/kind-action@v1.8.0
        with:
          cluster_name: test-cluster
          kubectl_version: v1.27.3

      - name: Build Docker image for testing
        run: |
          # Build test image that will be used throughout this workflow
          echo "Building test image: ${{ env.TEST_IMAGE_NAME }}:${{ env.TEST_IMAGE_TAG }}"
          docker build -t ${{ env.TEST_IMAGE_NAME }}:${{ env.TEST_IMAGE_TAG }} docker/ --progress=plain

      - name: Load test image into kind cluster
        run: |
          # Load the test image into kind cluster for Helm chart testing
          kind load docker-image ${{ env.TEST_IMAGE_NAME }}:${{ env.TEST_IMAGE_TAG }} --name test-cluster -v 3

      - name: Validate Helm Chart Templates with Kubernetes
        run: |
          # Validate Helm templates using the test image we just built
          helm template test helm/ssh-workspace \
            --set image.repository=${{ env.TEST_IMAGE_NAME }} \
            --set image.tag=${{ env.TEST_IMAGE_TAG }} \
            --set image.pullPolicy=Never \
            --set user.name="testuser" \
            --set "ssh.publicKeys[0]=$TEST_SSH_PUBLIC_KEY" \
            --set ssh.testKeys.enabled=true \
            --set "ssh.testKeys.keyPairs[0].publicKey=$TEST_SSH_PUBLIC_KEY" \
            --set "ssh.testKeys.keyPairs[0].privateKey=$(cat /tmp/test_ssh_key)" \
            --validate \
            --debug
          echo "✓ Helm template validation with Kubernetes API successful"

      - name: Install Helm Chart
        run: |
          echo "=== Installing Helm Chart: ${{ matrix.config.name }} ==="
          helm install test-workspace-${{ matrix.config.name }} helm/ssh-workspace \
            --set image.repository=${{ env.TEST_IMAGE_NAME }} \
            --set image.tag=${{ env.TEST_IMAGE_TAG }} \
            --set image.pullPolicy=Never \
            --set user.name="testuser" \
            --set "ssh.publicKeys[0]=$TEST_SSH_PUBLIC_KEY" \
            --set ssh.testKeys.enabled=true \
            --set "ssh.testKeys.keyPairs[0].publicKey=$TEST_SSH_PUBLIC_KEY" \
            --set "ssh.testKeys.keyPairs[0].privateKey=$(cat /tmp/test_ssh_key)" \
            --set security.permissionStrategy=${{ matrix.config.permission_strategy }} \
            --set security.level=${{ matrix.config.security_level }} \
            --debug &
          HELM_PID=$!
          
          # Monitor in background
          while kill -0 $HELM_PID 2>/dev/null; do
            echo "=== Checking cluster status ==="
            kubectl get pods -A | grep -E "(test-workspace-${{ matrix.config.name }}|pre-install)" || echo "No test-workspace-${{ matrix.config.name }} pods found"
            
            # Get detailed pod information if pods exist
            if kubectl get pods -l app.kubernetes.io/instance=test-workspace-${{ matrix.config.name }} >/dev/null 2>&1; then
              echo "=== Pod Details ==="
              kubectl get pods -l app.kubernetes.io/instance=test-workspace-${{ matrix.config.name }} -o wide
              echo "=== Pod Descriptions ==="
              kubectl describe pods -l app.kubernetes.io/instance=test-workspace-${{ matrix.config.name }}
              echo "=== Pod Logs ==="
              for pod in $(kubectl get pods -l app.kubernetes.io/instance=test-workspace-${{ matrix.config.name }} -o name); do
                echo "[POD] $pod"
                
                echo "[INIT-CONTAINER:ssh-setup]"
                kubectl logs $pod -c ssh-setup --tail=20 2>/dev/null || echo "[NO-LOGS]"
                
                echo "[MAIN-CONTAINER:ssh-workspace]"
                kubectl logs $pod -c ssh-workspace --tail=20 2>/dev/null || echo "[NO-LOGS]"
                
                echo "[PREVIOUS:ssh-workspace]"
                kubectl logs $pod -c ssh-workspace --previous=true --tail=20 2>/dev/null || echo "[NO-PREVIOUS-LOGS]"
              done
            fi
            
            echo "=== Recent Events ==="
            kubectl get events --sort-by='.lastTimestamp' | tail -15 || echo "No events found"
            sleep 30
          done
          
          wait $HELM_PID

      - name: Debug Deployment Configuration
        run: |
          echo "=== Checking Deployment Readiness Probe Configuration ==="
          kubectl get deployment test-workspace-${{ matrix.config.name }}-ssh-workspace -o yaml | grep -A 10 -B 5 readinessProbe || echo "No readiness probe found"
          
          echo "=== Checking Pod Status ==="
          kubectl get pods -l app.kubernetes.io/instance=test-workspace-${{ matrix.config.name }}
          
          echo "=== Checking Pod Readiness Details ==="
          kubectl describe pod -l app.kubernetes.io/instance=test-workspace-${{ matrix.config.name }} | grep -A 10 -B 5 "Readiness\|Ready\|port"

      - name: Run Helm Tests
        run: |
          helm test test-workspace-${{ matrix.config.name }} --timeout=300s

      - name: SSH Connectivity Test (External)
        run: |
          echo "=== External SSH Connectivity Test ==="
          echo "Configuration: ${{ matrix.config.name }}"
          
          # Wait for pod to be ready
          echo "Waiting for pod to be ready..."
          kubectl wait --for=condition=ready pod -l app.kubernetes.io/name=ssh-workspace --timeout=120s
          
          # Get service information
          SERVICE_PORT=$(kubectl get service test-workspace-${{ matrix.config.name }}-ssh-workspace -o jsonpath='{.spec.ports[0].port}')
          echo "Service port: $SERVICE_PORT"
          
          # Port forward for SSH access
          echo "Setting up port forward..."
          kubectl port-forward service/test-workspace-${{ matrix.config.name }}-ssh-workspace 2222:$SERVICE_PORT &
          PORT_FORWARD_PID=$!
          sleep 10
          
          # Test external SSH connectivity only
          echo "Testing external SSH connection..."
          ssh -i $TEST_SSH_PRIVATE_KEY_PATH \
              -o StrictHostKeyChecking=no \
              -o UserKnownHostsFile=/dev/null \
              -o ConnectTimeout=10 \
              -o BatchMode=yes \
              testuser@localhost -p 2222 \
              'echo "External SSH connection successful! Configuration: ${{ matrix.config.name }}"' || {
            echo "❌ External SSH connection failed!"
            
            # Basic debugging
            echo "=== Network connectivity test ==="
            nc -zv localhost 2222 || echo "Port 2222 not accessible"
            
            echo "=== Service status ==="
            kubectl get service test-workspace-${{ matrix.config.name }}-ssh-workspace -o wide
            
            # Kill port forward and exit
            kill $PORT_FORWARD_PID 2>/dev/null || true
            exit 1
          }
          
          # Cleanup
          kill $PORT_FORWARD_PID 2>/dev/null || true
          
          echo "✓ External SSH connectivity test completed successfully!"

      - name: Check deployment status
        if: always()
        run: |
          echo "=== Final Helm Status ==="
          helm status test-workspace-${{ matrix.config.name }} || echo "Helm release not found"
          
          echo "=== Getting all resources ==="
          kubectl get all -l app.kubernetes.io/instance=test-workspace-${{ matrix.config.name }} -o wide
          
          echo "=== Describing pods ==="
          kubectl describe pod -l app.kubernetes.io/instance=test-workspace-${{ matrix.config.name }}
          
          echo "=== Pod Logs ==="
          for pod in $(kubectl get pods -l app.kubernetes.io/instance=test-workspace-${{ matrix.config.name }} -o name 2>/dev/null); do
            echo "[POD] $pod"
            
            echo "[INIT-CONTAINER:ssh-setup]"
            kubectl logs $pod -c ssh-setup --tail=30 2>/dev/null || echo "[NO-LOGS]"
            
            echo "[MAIN-CONTAINER:ssh-workspace]"
            kubectl logs $pod -c ssh-workspace --tail=30 2>/dev/null || echo "[NO-LOGS]"
            
            echo "[PREVIOUS:ssh-workspace]"
            kubectl logs $pod -c ssh-workspace --previous=true --tail=30 2>/dev/null || echo "[NO-PREVIOUS-LOGS]"
          done
          
          if [ -z "$(kubectl get pods -l app.kubernetes.io/instance=test-workspace-${{ matrix.config.name }} -o name 2>/dev/null)" ]; then
            echo "[NO-PODS-FOUND]"
          fi
          
          echo "=== All Events ==="
          kubectl get events --sort-by='.lastTimestamp' | grep test-workspace-${{ matrix.config.name }} || echo "No test-workspace-${{ matrix.config.name }} events found"
          
          echo "=== All Recent Events ==="
          kubectl get events --sort-by='.lastTimestamp' | tail -20
          
          echo "=== Deployment troubleshooting ==="
          kubectl get deployment test-workspace-${{ matrix.config.name }}-ssh-workspace -o yaml || echo "Deployment not found"
          
          echo "=== ReplicaSet troubleshooting ==="
          kubectl get rs -l app.kubernetes.io/instance=test-workspace-${{ matrix.config.name }} -o yaml || echo "ReplicaSet not found"

      - name: Cleanup
        if: always()
        run: |
          echo "=== Cleaning up ==="
          # Clean up SSH test keys
          rm -f $TEST_SSH_PRIVATE_KEY_PATH $TEST_SSH_PRIVATE_KEY_PATH.pub 2>/dev/null || true
          
          helm uninstall test-workspace-${{ matrix.config.name }} --debug || true
          echo "=== Final cluster state ==="
          kubectl get all -A | grep test-workspace-${{ matrix.config.name }} || echo "No remaining test-workspace-${{ matrix.config.name }} resources"

