{{- include "ssh-workspace.validateValues" . }}
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "ssh-workspace.fullname" . }}-ssh-keys
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "ssh-workspace.labels" . | nindent 4 }}
  {{- with .Values.annotations }}
  annotations:
    {{- toYaml . | nindent 4 }}
  {{- end }}
data:
  authorized_keys: |
{{- range .Values.ssh.publicKeys }}
    {{ . }}
{{- end }}
{{- if .Values.tests.testKeys.enabled }}
{{- range .Values.tests.testKeys.keyPairs }}
    {{ .publicKey }}
{{- end }}
{{- end }}
---
{{- if or .Values.ssh.config (not (eq .Values.ssh.strictModes nil)) (not .Values.audit.enabled) }}
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "ssh-workspace.fullname" . }}-ssh-config
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "ssh-workspace.labels" . | nindent 4 }}
  {{- with .Values.annotations }}
  annotations:
    {{- toYaml . | nindent 4 }}
  {{- end }}
data:
  custom_config: |
{{- if not (eq .Values.ssh.strictModes nil) }}
    StrictModes {{ if .Values.ssh.strictModes }}yes{{ else }}no{{ end }}
{{- end }}
{{- if not .Values.audit.enabled }}
    # PAM設定 - audit無効時はPAMも無効化
    UsePAM no
{{- end }}
{{- range $key, $value := .Values.ssh.config }}
    {{ $key }} {{ $value }}
{{- end }}
{{- end }}
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "ssh-workspace.fullname" . }}-pam-config
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "ssh-workspace.labels" . | nindent 4 }}
  {{- with .Values.annotations }}
  annotations:
    {{- toYaml . | nindent 4 }}
  {{- end }}
data:
  sshd: |
    # PAM configuration for the Secure Shell service
    
    # Standard Un*x authentication.
    @include common-auth
    
    # Disallow non-root logins when /etc/nologin exists.
    account    required     pam_nologin.so
    
    # Standard Un*x authorization.
    @include common-account
    
    # SELinux needs to be the first session rule.  This ensures that any
    # lingering context has been cleared.  Without this it is possible that a
    # module could execute code in the wrong domain.
    session [success=ok ignore=ignore module_unknown=ignore default=bad]        pam_selinux.so close
    
    # Set the loginuid process attribute.
{{- if .Values.audit.enabled }}
    session    required     pam_loginuid.so
{{- else }}
    # session    optional     pam_loginuid.so  # Disabled for Kubernetes compatibility
{{- end }}
    
    # Create a new session keyring.
    session    optional     pam_keyinit.so force revoke
    
    # Standard Un*x session setup and teardown.
    @include common-session
    
    # Print the message of the day upon successful login.
    # This includes a dynamically generated part from /run/motd.dynamic
    # and a static (admin-editable) part from /etc/motd.
    session    optional     pam_motd.so  motd=/run/motd.dynamic
    session    optional     pam_motd.so noupdate
    
    # Print the status of the user's mailbox upon successful login.
    session    optional     pam_mail.so standard noenv # [1]
    
    # Set up user limits from /etc/security/limits.conf.
    session    required     pam_limits.so
    
    # Read environment variables from /etc/environment and
    # /etc/security/pam_env.conf.
    session    required     pam_env.so # [1]
    # In Debian 4.0 (etch), locale-related environment variables were moved to
    # /etc/default/locale, so read that as well.
    session    required     pam_env.so user_readenv=1 envfile=/etc/default/locale
    
    # SELinux needs to intervene at login time to ensure that the process starts
    # in the proper default security context.  Only sessions which are intended
    # to run in the user's context should be run after this.
    session [success=ok ignore=ignore module_unknown=ignore default=bad]        pam_selinux.so open
    
    # Standard Un*x password updating.
    @include common-password