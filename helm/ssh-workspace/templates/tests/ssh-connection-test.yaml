{{- if .Values.tests.connectivity.enabled }}
apiVersion: v1
kind: Pod
metadata:
  name: {{ include "ssh-workspace.fullname" . }}-ssh-test
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "ssh-workspace.labels" . | nindent 4 }}
    app.kubernetes.io/component: test
  annotations:
    "helm.sh/hook": test
    "helm.sh/hook-weight": "0"
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
    {{- with .Values.annotations }}
    {{- toYaml . | nindent 4 }}
    {{- end }}
spec:
  restartPolicy: Never
  serviceAccountName: {{ include "ssh-workspace.fullname" . }}-test
  containers:
  - name: ssh-connection-test
    image: alpine:3.18
    command:
    - /bin/sh
    - -c
    - |
      set -e
      
      # Install required tools
      apk add --no-cache openssh-client netcat-openbsd jq
      
      # Source test library if available
      if [ -f /test-lib/test-lib.sh ]; then
          source /test-lib/test-lib.sh
      else
          # Fallback functions
          log_test() { echo "[$2] $1: $3"; }
          print_test_results() { echo "Test completed"; }
      fi
      
      echo "=== SSH Connectivity Test ==="
      echo "Strategy: {{ .Values.security.permissionStrategy }}"
      echo "Security Level: {{ .Values.security.level }}"
      
      # Use enhanced connectivity test if available
      if command -v test_connectivity_detailed >/dev/null 2>&1; then
          test_connectivity_detailed
      else
          # Fallback to basic test
          echo "Testing SSH connection to workspace..."
          
          # Test TCP connection
          echo "Testing TCP connection..."
          if ! nc -z {{ include "ssh-workspace.fullname" . }}.{{ .Release.Namespace }}.svc.cluster.local {{ .Values.service.port }}; then
            log_test "tcp_connection" "FAIL" "Cannot establish TCP connection to SSH service"
            print_test_results
            exit 1
          fi
          log_test "tcp_connection" "PASS" "TCP connection successful"
          
          # Test SSH protocol
          echo "Testing SSH protocol..."
          SSH_RESULT=$(timeout 10 ssh -o BatchMode=yes -o ConnectTimeout=5 -o StrictHostKeyChecking=no \
            {{ .Values.user.name }}@{{ include "ssh-workspace.fullname" . }}.{{ .Release.Namespace }}.svc.cluster.local \
            -p {{ .Values.service.port }} echo "SSH test" 2>&1 || true)
          
          if echo "$SSH_RESULT" | grep -q "Permission denied"; then
              log_test "ssh_protocol" "PASS" "SSH service responding correctly (authentication rejected as expected)"
          elif echo "$SSH_RESULT" | grep -q "SSH test"; then
              log_test "ssh_protocol" "PASS" "SSH service responding correctly (authentication successful)"
          else
              log_test "ssh_protocol" "FAIL" "SSH service not responding as expected: $SSH_RESULT"
          fi
      fi
      
      print_test_results
    
    volumeMounts:
    - name: test-lib
      mountPath: /test-lib
    resources:
      limits:
        cpu: 100m
        memory: 64Mi
      requests:
        cpu: 50m
        memory: 32Mi
  
  volumes:
  - name: test-lib
    configMap:
      name: {{ include "ssh-workspace.fullname" . }}-test-lib
      defaultMode: 0755
      optional: true
{{- end }}