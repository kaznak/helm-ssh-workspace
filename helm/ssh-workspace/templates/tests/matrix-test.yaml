{{- if .Values.tests.matrix.enabled }}
{{- range $permStrategy := .Values.tests.matrix.permissionStrategies }}
{{- range $secLevel := .Values.tests.matrix.securityLevels }}
---
apiVersion: v1
kind: Pod
metadata:
  name: {{ include "ssh-workspace.fullname" $ }}-matrix-{{ $permStrategy }}-{{ $secLevel }}
  namespace: {{ $.Release.Namespace }}
  labels:
    {{- include "ssh-workspace.labels" $ | nindent 4 }}
    app.kubernetes.io/component: test
    test.ssh-workspace.io/strategy: {{ $permStrategy }}
    test.ssh-workspace.io/security-level: {{ $secLevel }}
  annotations:
    "helm.sh/hook": test
    "helm.sh/hook-weight": "10"
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
spec:
  restartPolicy: Never
  serviceAccountName: {{ include "ssh-workspace.fullname" $ }}-test
  containers:
  - name: matrix-test
    image: alpine:3.18
    command:
    - /bin/sh
    - -c
    - |
      set -e
      
      # Install required tools
      apk add --no-cache kubectl jq openssh-client netcat-openbsd
      
      # Source test library
      source /test-lib/test-lib.sh
      
      echo "=== Matrix Test: {{ $permStrategy }} / {{ $secLevel }} ==="
      
      # Create a temporary workspace instance with the test configuration
      echo "Creating test workspace with strategy={{ $permStrategy }}, level={{ $secLevel }}"
      
      # Generate test values
      cat > /tmp/test-values.yaml <<EOF
      user:
        name: testuser-{{ $permStrategy }}-{{ $secLevel }}
        uid: {{ $.Values.user.uid | default 1000 }}
        gid: {{ $.Values.user.gid | default 1000 }}
      
      security:
        level: {{ $secLevel }}
        permissionStrategy: {{ $permStrategy }}
      
      ssh:
        publicKeys:
          - "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQC7... test-key"
      
      service:
        type: ClusterIP
        port: 2222
      
      persistence:
        enabled: false
      
      monitoring:
        enabled: false
      EOF
      
      # Install the test instance
      TEST_RELEASE_NAME="{{ $.Release.Name }}-test-{{ $permStrategy }}-{{ $secLevel }}"
      
      echo "Installing test release: $TEST_RELEASE_NAME"
      helm install "$TEST_RELEASE_NAME" /charts/ssh-workspace \
        --namespace {{ $.Release.Namespace }} \
        --values /tmp/test-values.yaml \
        --wait --timeout=300s || {
        log_test "matrix_install_{{ $permStrategy }}_{{ $secLevel }}" "FAIL" "Could not install test workspace"
        print_test_results
        exit 1
      }
      
      log_test "matrix_install_{{ $permStrategy }}_{{ $secLevel }}" "PASS" "Test workspace installed successfully"
      
      # Wait for pod to be ready
      kubectl wait --for=condition=ready pod \
        -l app.kubernetes.io/instance="$TEST_RELEASE_NAME" \
        --timeout=120s || {
        log_test "matrix_ready_{{ $permStrategy }}_{{ $secLevel }}" "FAIL" "Pod did not become ready"
        helm uninstall "$TEST_RELEASE_NAME" --namespace {{ $.Release.Namespace }} || true
        print_test_results
        exit 1
      }
      
      log_test "matrix_ready_{{ $permStrategy }}_{{ $secLevel }}" "PASS" "Pod is ready"
      
      # Get the test pod
      TEST_POD=$(kubectl get pods -l app.kubernetes.io/instance="$TEST_RELEASE_NAME" -o jsonpath='{.items[0].metadata.name}')
      
      # Test the specific configuration
      echo "Testing configuration in pod: $TEST_POD"
      
      # Check permission strategy implementation
      STRATEGY_OUTPUT=$(kubectl exec "$TEST_POD" -- /bin/sh -c '
          HOME_DIR="/home/testuser-{{ $permStrategy }}-{{ $secLevel }}"
          if [ -d "$HOME_DIR" ]; then
              PERMS=$(stat -c %a "$HOME_DIR")
              SETGID_CHECK=$((PERMS & 2000))
              echo "strategy_check:$SETGID_CHECK"
              echo "permissions:$PERMS"
          fi
      ')
      
      STRATEGY_RESULT=$(echo "$STRATEGY_OUTPUT" | grep "strategy_check:" | cut -d: -f2)
      ACTUAL_PERMS=$(echo "$STRATEGY_OUTPUT" | grep "permissions:" | cut -d: -f2)
      
      case "{{ $permStrategy }}" in
          "fsgroup")
              if [ "$STRATEGY_RESULT" != "0" ]; then
                  log_test "strategy_validation_{{ $permStrategy }}_{{ $secLevel }}" "PASS" "fsgroup strategy correctly applied (SetGID bit present, perms: $ACTUAL_PERMS)"
              else
                  log_test "strategy_validation_{{ $permStrategy }}_{{ $secLevel }}" "FAIL" "fsgroup strategy not applied (SetGID bit missing, perms: $ACTUAL_PERMS)"
              fi
              ;;
          "explicit")
              if [ "$STRATEGY_RESULT" = "0" ]; then
                  log_test "strategy_validation_{{ $permStrategy }}_{{ $secLevel }}" "PASS" "explicit strategy correctly applied (no SetGID bit, perms: $ACTUAL_PERMS)"
              else
                  log_test "strategy_validation_{{ $permStrategy }}_{{ $secLevel }}" "FAIL" "explicit strategy not applied (SetGID bit present, perms: $ACTUAL_PERMS)"
              fi
              ;;
      esac
      
      # Test SSH connectivity for this configuration
      SERVICE_NAME="${TEST_RELEASE_NAME}-ssh-workspace"
      if nc -z "$SERVICE_NAME.{{ $.Release.Namespace }}.svc.cluster.local" 2222; then
          log_test "connectivity_{{ $permStrategy }}_{{ $secLevel }}" "PASS" "SSH service is accessible"
      else
          log_test "connectivity_{{ $permStrategy }}_{{ $secLevel }}" "FAIL" "SSH service is not accessible"
      fi
      
      # Cleanup test instance
      echo "Cleaning up test release: $TEST_RELEASE_NAME"
      helm uninstall "$TEST_RELEASE_NAME" --namespace {{ $.Release.Namespace }} || {
          log_test "cleanup_{{ $permStrategy }}_{{ $secLevel }}" "FAIL" "Could not clean up test workspace"
      }
      
      log_test "cleanup_{{ $permStrategy }}_{{ $secLevel }}" "PASS" "Test workspace cleaned up"
      
      # Print results for this matrix test
      print_test_results
    
    volumeMounts:
    - name: test-lib
      mountPath: /test-lib
    - name: chart-source
      mountPath: /charts
    resources:
      limits:
        cpu: 500m
        memory: 256Mi
      requests:
        cpu: 200m
        memory: 128Mi
  
  volumes:
  - name: test-lib
    configMap:
      name: {{ include "ssh-workspace.fullname" $ }}-test-lib
      defaultMode: 0755
  - name: chart-source
    emptyDir: {}
{{- end }}
{{- end }}
{{- end }}