apiVersion: v1
kind: Pod
metadata:
  name: {{ include "ssh-workspace.fullname" . }}-resource-test
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "ssh-workspace.labels" . | nindent 4 }}
    app.kubernetes.io/component: test
  annotations:
    "helm.sh/hook": test
    "helm.sh/hook-weight": "-1"
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
    {{- with .Values.annotations }}
    {{- toYaml . | nindent 4 }}
    {{- end }}
spec:
  restartPolicy: Never
  {{- if .Values.tests.rbac.create }}
  serviceAccountName: {{ include "ssh-workspace.fullname" . }}-test
  {{- end }}
  containers:
  - name: resource-validation-test
    image: alpine:3.18
    command:
    - /bin/sh
    - -c
    - |
      set -e
      echo "Testing deployed resources..."
      
      # Install kubectl
      apk add --no-cache curl
      curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
      chmod +x kubectl
      mv kubectl /usr/local/bin/
      
      # Test ConfigMap
      echo "Checking ConfigMap..."
      kubectl get configmap {{ include "ssh-workspace.fullname" . }}-ssh-keys -n {{ .Release.Namespace }}
      echo "✓ SSH keys ConfigMap exists"
      
      # Test Secret
      echo "Checking Secret..."
      kubectl get secret {{ include "ssh-workspace.fullname" . }}-host-keys -n {{ .Release.Namespace }}
      echo "✓ Host keys Secret exists"
      
      # Test Deployment
      echo "Checking Deployment..."
      kubectl get deployment {{ include "ssh-workspace.fullname" . }} -n {{ .Release.Namespace }}
      kubectl rollout status deployment/{{ include "ssh-workspace.fullname" . }} -n {{ .Release.Namespace }} --timeout=300s
      echo "✓ Deployment is ready"
      
      # Test Service
      echo "Checking Service..."
      kubectl get service {{ include "ssh-workspace.fullname" . }} -n {{ .Release.Namespace }}
      echo "✓ Service exists"
      
      {{- if .Values.persistence.enabled }}
      # Test PVC
      echo "Checking PersistentVolumeClaim..."
      kubectl get pvc {{ include "ssh-workspace.fullname" . }}-home -n {{ .Release.Namespace }}
      echo "✓ PersistentVolumeClaim exists"
      {{- end }}
      
      {{- if .Values.monitoring.enabled }}
      # Test Monitoring Service
      echo "Checking Monitoring Service..."
      kubectl get service {{ include "ssh-workspace.fullname" . }}-metrics -n {{ .Release.Namespace }}
      echo "✓ Monitoring Service exists"
      {{- end }}
      
      echo "✓ All resources are deployed correctly"
    resources:
      limits:
        cpu: 200m
        memory: 128Mi
      requests:
        cpu: 100m
        memory: 64Mi
    # kubectl will automatically use ServiceAccount token for authentication