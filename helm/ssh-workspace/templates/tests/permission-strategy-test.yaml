{{- if .Values.tests.permissions.enabled }}
apiVersion: v1
kind: Pod
metadata:
  name: {{ include "ssh-workspace.fullname" . }}-permission-test
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "ssh-workspace.labels" . | nindent 4 }}
    app.kubernetes.io/component: test
  annotations:
    "helm.sh/hook": test
    "helm.sh/hook-weight": "5"
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
spec:
  restartPolicy: Never
  serviceAccountName: {{ include "ssh-workspace.fullname" . }}-test
  containers:
  - name: permission-strategy-test
    image: alpine:3.18
    command:
    - /bin/sh
    - -c
    - |
      set -e
      
      # Install required tools
      apk add --no-cache kubectl jq curl
      
      # Source test library
      source /test-lib/test-lib.sh
      
      echo "=== Permission Strategy Test ==="
      echo "Testing strategy: {{ .Values.security.permissionStrategy }}"
      
      # Get the workspace pod
      POD_NAME=$(kubectl get pods -l app.kubernetes.io/name=ssh-workspace,app.kubernetes.io/instance={{ .Release.Name }} -o jsonpath='{.items[0].metadata.name}')
      
      if [ -z "$POD_NAME" ]; then
          log_test "pod_detection" "FAIL" "Could not find SSH workspace pod"
          print_test_results
          exit 1
      fi
      
      log_test "pod_detection" "PASS" "Found workspace pod: $POD_NAME"
      
      # Test permission strategy detection
      echo "Executing permission detection in workspace pod..."
      PERM_OUTPUT=$(kubectl exec "$POD_NAME" -- /bin/sh -c '
          if [ -d "/home/{{ .Values.user.name }}" ]; then
              PERMS=$(stat -c %a "/home/{{ .Values.user.name }}")
              SETGID_CHECK=$((PERMS & 2000))
              echo "home_permissions:$PERMS"
              echo "setgid_bit:$SETGID_CHECK"
              
              if [ -d "/home/{{ .Values.user.name }}/.ssh" ]; then
                  SSH_PERMS=$(stat -c %a "/home/{{ .Values.user.name }}/.ssh")
                  echo "ssh_permissions:$SSH_PERMS"
              fi
              
              if [ -f "/home/{{ .Values.user.name }}/.ssh/authorized_keys" ]; then
                  AUTH_PERMS=$(stat -c %a "/home/{{ .Values.user.name }}/.ssh/authorized_keys")
                  echo "authorized_keys_permissions:$AUTH_PERMS"
              fi
          fi
      ')
      
      echo "Permission detection output:"
      echo "$PERM_OUTPUT"
      
      # Parse the output
      HOME_PERMS=$(echo "$PERM_OUTPUT" | grep "home_permissions:" | cut -d: -f2)
      SETGID_BIT=$(echo "$PERM_OUTPUT" | grep "setgid_bit:" | cut -d: -f2)
      SSH_PERMS=$(echo "$PERM_OUTPUT" | grep "ssh_permissions:" | cut -d: -f2)
      AUTH_PERMS=$(echo "$PERM_OUTPUT" | grep "authorized_keys_permissions:" | cut -d: -f2)
      
      # Validate based on expected strategy
      case "{{ .Values.security.permissionStrategy }}" in
          "fsgroup")
              # Should have SetGID bit
              if [ "$SETGID_BIT" != "0" ]; then
                  log_test "setgid_bit_fsgroup" "PASS" "SetGID bit correctly present for fsgroup strategy (perms: $HOME_PERMS)"
              else
                  log_test "setgid_bit_fsgroup" "FAIL" "SetGID bit missing for fsgroup strategy (perms: $HOME_PERMS)"
              fi
              ;;
          "explicit")
              # Should NOT have SetGID bit
              if [ "$SETGID_BIT" = "0" ]; then
                  log_test "setgid_bit_explicit" "PASS" "SetGID bit correctly absent for explicit strategy (perms: $HOME_PERMS)"
              else
                  log_test "setgid_bit_explicit" "FAIL" "SetGID bit unexpectedly present for explicit strategy (perms: $HOME_PERMS)"
              fi
              ;;
      esac
      
      # Check SSH directory permissions
      if [ -n "$SSH_PERMS" ]; then
          if [ "$SSH_PERMS" = "700" ] || [ "$SSH_PERMS" = "2700" ]; then
              log_test "ssh_directory_permissions" "PASS" "SSH directory has secure permissions: $SSH_PERMS"
          else
              log_test "ssh_directory_permissions" "FAIL" "SSH directory has insecure permissions: $SSH_PERMS"
          fi
      fi
      
      # Check authorized_keys permissions
      if [ -n "$AUTH_PERMS" ]; then
          if [ "$AUTH_PERMS" = "600" ]; then
              log_test "authorized_keys_permissions" "PASS" "authorized_keys has correct permissions: $AUTH_PERMS"
          else
              log_test "authorized_keys_permissions" "FAIL" "authorized_keys has incorrect permissions: $AUTH_PERMS"
          fi
      fi
      
      # Validate security context
      validate_security_context "{{ .Values.security.permissionStrategy }}" "{{ .Values.security.level }}"
      
      # Print final results
      print_test_results
    
    volumeMounts:
    - name: test-lib
      mountPath: /test-lib
    resources:
      limits:
        cpu: 200m
        memory: 128Mi
      requests:
        cpu: 100m
        memory: 64Mi
  
  volumes:
  - name: test-lib
    configMap:
      name: {{ include "ssh-workspace.fullname" . }}-test-lib
      defaultMode: 0755
{{- end }}