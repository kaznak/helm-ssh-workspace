{{- if or .Values.tests.permissions.enabled .Values.tests.security.enabled .Values.tests.matrix.enabled }}
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "ssh-workspace.fullname" . }}-test-lib
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "ssh-workspace.labels" . | nindent 4 }}
    app.kubernetes.io/component: test
  annotations:
    "helm.sh/hook": test
    "helm.sh/hook-weight": "-10"
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
data:
  test-lib.sh: |
    #!/bin/bash
    set -e
    
    # Test result tracking
    RESULTS_FILE="/tmp/test-results.json"
    echo '{"tests": []}' > "$RESULTS_FILE"
    
    # Common test functions
    log_test() {
        local name="$1"
        local status="$2"
        local details="$3"
        echo "[$status] $name: $details"
        
        # Update results file
        jq --arg name "$name" --arg status "$status" --arg details "$details" \
           '.tests += [{"name": $name, "status": $status, "details": $details}]' \
           "$RESULTS_FILE" > "${RESULTS_FILE}.tmp" && mv "${RESULTS_FILE}.tmp" "$RESULTS_FILE"
    }
    
    # Check if SetGID bit is set on a directory
    check_setgid_bit() {
        local dir="$1"
        local perms=$(stat -c %a "$dir" 2>/dev/null || echo "000")
        if [ $((perms & 2000)) -ne 0 ]; then
            echo "setgid"
        else
            echo "normal"
        fi
    }
    
    # Verify file permissions
    verify_file_permissions() {
        local file="$1"
        local expected_perms="$2"
        local actual_perms=$(stat -c %a "$file" 2>/dev/null || echo "000")
        
        if [ "$actual_perms" = "$expected_perms" ]; then
            log_test "file_permissions_${file##*/}" "PASS" "Permissions $actual_perms match expected $expected_perms"
            return 0
        else
            log_test "file_permissions_${file##*/}" "FAIL" "Permissions $actual_perms do not match expected $expected_perms"
            return 1
        fi
    }
    
    # Check SSH configuration
    verify_ssh_config() {
        local test_name="ssh_config_validation"
        
        # Test SSH daemon configuration
        if ssh -o BatchMode=yes -o ConnectTimeout=5 -o StrictHostKeyChecking=no \
               {{ .Values.user.name }}@{{ include "ssh-workspace.fullname" . }}.{{ .Release.Namespace }}.svc.cluster.local \
               -p {{ .Values.service.port }} "echo 'SSH test'" 2>&1 | grep -q "Permission denied"; then
            log_test "$test_name" "PASS" "SSH daemon is properly configured and rejecting unauthenticated access"
            return 0
        else
            log_test "$test_name" "FAIL" "SSH daemon not responding as expected"
            return 1
        fi
    }
    
    # Validate security context based on strategy
    validate_security_context() {
        local strategy="$1"
        local security_level="$2"
        local test_name="security_context_${strategy}_${security_level}"
        
        echo "Validating security context: strategy=$strategy, level=$security_level"
        
        # Get Pod information
        POD_NAME=$(kubectl get pods -l app.kubernetes.io/name=ssh-workspace,app.kubernetes.io/instance={{ .Release.Name }} -o jsonpath='{.items[0].metadata.name}')
        
        if [ -z "$POD_NAME" ]; then
            log_test "$test_name" "FAIL" "Could not find SSH workspace pod"
            return 1
        fi
        
        # Check security context
        kubectl get pod "$POD_NAME" -o json | jq -r '.spec.securityContext' > /tmp/pod-security-context.json
        kubectl get pod "$POD_NAME" -o json | jq -r '.spec.containers[0].securityContext' > /tmp/container-security-context.json
        
        case "$strategy" in
            "fsgroup")
                # Should have fsGroup set
                FS_GROUP=$(jq -r '.fsGroup' /tmp/pod-security-context.json)
                if [ "$FS_GROUP" != "null" ] && [ "$FS_GROUP" != "" ]; then
                    log_test "$test_name" "PASS" "fsGroup correctly set to $FS_GROUP"
                else
                    log_test "$test_name" "FAIL" "fsGroup not set for fsgroup strategy"
                    return 1
                fi
                ;;
            "explicit")
                # Should NOT have fsGroup set, should have runAsUser
                RUN_AS_USER=$(jq -r '.runAsUser' /tmp/pod-security-context.json)
                FS_GROUP=$(jq -r '.fsGroup' /tmp/pod-security-context.json)
                if [ "$FS_GROUP" = "null" ] && [ "$RUN_AS_USER" = "0" ]; then
                    log_test "$test_name" "PASS" "explicit strategy correctly configured (no fsGroup, runAsUser=0)"
                else
                    log_test "$test_name" "FAIL" "explicit strategy misconfigured (fsGroup=$FS_GROUP, runAsUser=$RUN_AS_USER)"
                    return 1
                fi
                ;;
        esac
        
        return 0
    }
    
    # Test connectivity with detailed diagnostics
    test_connectivity_detailed() {
        local test_name="connectivity_detailed"
        
        echo "Testing detailed SSH connectivity..."
        
        # Install tools if needed
        if ! command -v nc >/dev/null 2>&1; then
            apk add --no-cache netcat-openbsd openssh-client jq curl || {
                log_test "$test_name" "FAIL" "Could not install required tools"
                return 1
            }
        fi
        
        # Test TCP connectivity
        if ! nc -z {{ include "ssh-workspace.fullname" . }}.{{ .Release.Namespace }}.svc.cluster.local {{ .Values.service.port }}; then
            log_test "$test_name" "FAIL" "TCP connection failed"
            return 1
        fi
        
        # Test SSH protocol response
        SSH_BANNER=$(timeout 10 nc {{ include "ssh-workspace.fullname" . }}.{{ .Release.Namespace }}.svc.cluster.local {{ .Values.service.port }} <<< "" 2>/dev/null | head -1)
        if echo "$SSH_BANNER" | grep -q "SSH-2.0"; then
            log_test "$test_name" "PASS" "SSH service responding with banner: $SSH_BANNER"
        else
            log_test "$test_name" "FAIL" "SSH service not responding with valid SSH banner"
            return 1
        fi
        
        return 0
    }
    
    # Print final test results
    print_test_results() {
        echo "==============================================="
        echo "           TEST RESULTS SUMMARY"
        echo "==============================================="
        
        local total=$(jq '.tests | length' "$RESULTS_FILE")
        local passed=$(jq '[.tests[] | select(.status == "PASS")] | length' "$RESULTS_FILE")
        local failed=$(jq '[.tests[] | select(.status == "FAIL")] | length' "$RESULTS_FILE")
        
        echo "Total tests: $total"
        echo "Passed: $passed"
        echo "Failed: $failed"
        echo ""
        
        if [ "$failed" -gt 0 ]; then
            echo "FAILED TESTS:"
            jq -r '.tests[] | select(.status == "FAIL") | "- \(.name): \(.details)"' "$RESULTS_FILE"
            echo ""
        fi
        
        echo "DETAILED RESULTS:"
        jq -r '.tests[] | "[\(.status)] \(.name): \(.details)"' "$RESULTS_FILE"
        
        if [ "$failed" -gt 0 ]; then
            exit 1
        fi
    }
{{- end }}