{{- if and .Values.tests.sshConnectivity.enabled .Values.ssh.testKeys.enabled }}
apiVersion: v1
kind: Pod
metadata:
  name: {{ include "ssh-workspace.fullname" . }}-ssh-server-diagnosis-test
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "ssh-workspace.labels" . | nindent 4 }}
    app.kubernetes.io/component: test
  annotations:
    "helm.sh/hook": test
    "helm.sh/hook-weight": "9"  # Run before connectivity test
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
spec:
  restartPolicy: Never
  serviceAccountName: {{ include "ssh-workspace.fullname" . }}-test
  containers:
  - name: ssh-server-diagnosis
    image: alpine:3.18
    command:
    - /bin/sh
    - -c
    - |
      set -e
      
      echo "=== SSH Server Diagnosis Test Started ==="
      echo "Timestamp: $(date)"
      
      # Install required packages
      apk add --no-cache openssh-client curl netcat-openbsd
      
      # Find the main workspace pod
      echo "=== Finding Main Workspace Pod ==="
      POD_NAME=""
      for pod in $(kubectl get pods -l app.kubernetes.io/name=ssh-workspace,app.kubernetes.io/instance={{ .Release.Name }} -o name 2>/dev/null); do
        # Skip test pods (they have helm.sh/hook annotation)
        if ! kubectl get "$pod" -o jsonpath='{.metadata.annotations.helm\.sh/hook}' 2>/dev/null | grep -q test; then
          POD_NAME=$(echo "$pod" | cut -d'/' -f2)
          break
        fi
      done
      
      if [ -z "$POD_NAME" ]; then
        echo "ERROR: Could not find main workspace pod"
        kubectl get pods -l app.kubernetes.io/instance={{ .Release.Name }}
        exit 1
      fi
      
      echo "Found main workspace pod: $POD_NAME"
      
      # Wait for pod to be ready
      echo "Waiting for workspace pod to be ready..."
      kubectl wait --for=condition=ready pod/"$POD_NAME" --timeout=120s
      
      echo "=== SSH Server Configuration Analysis ==="
      
      # Check SSH daemon status
      echo "SSH daemon process status:"
      kubectl exec "$POD_NAME" -c ssh-workspace -- ps aux | grep -E "(sshd|ssh)" || echo "No SSH processes found"
      
      # Check SSH daemon configuration
      echo "SSH daemon configuration (key settings):"
      kubectl exec "$POD_NAME" -c ssh-workspace -- grep -E "^(PubkeyAuthentication|AuthorizedKeysFile|PasswordAuthentication|PermitRootLogin)" /etc/ssh/sshd_config || echo "SSH config not accessible"
      
      # Check SSH host keys
      echo "SSH host key status:"
      kubectl exec "$POD_NAME" -c ssh-workspace -- ls -la /etc/ssh/ssh_host_* || echo "SSH host keys not found"
      
      # Check user and SSH directory setup
      echo "=== User SSH Directory Analysis ==="
      kubectl exec "$POD_NAME" -c ssh-workspace -- /bin/sh -c '
        echo "User info:"
        id testuser 2>/dev/null || echo "User testuser not found"
        
        echo "Home directory:"
        ls -la /home/testuser/ 2>/dev/null || echo "Home directory not accessible"
        
        echo "SSH directory:"
        ls -la /home/testuser/.ssh/ 2>/dev/null || echo "SSH directory not found"
        
        echo "authorized_keys file:"
        if [ -f /home/testuser/.ssh/authorized_keys ]; then
          echo "File exists, permissions: $(stat -c "%a %U:%G" /home/testuser/.ssh/authorized_keys)"
          echo "Line count: $(wc -l < /home/testuser/.ssh/authorized_keys)"
          echo "Key types found:"
          cut -d" " -f1 /home/testuser/.ssh/authorized_keys | sort | uniq -c
          echo "First key fingerprint:"
          ssh-keygen -l -f /home/testuser/.ssh/authorized_keys 2>/dev/null | head -1 || echo "Cannot get key fingerprint"
        else
          echo "authorized_keys file does not exist"
        fi
      ' || echo "Failed to analyze user SSH setup"
      
      # Check service connectivity from inside cluster
      echo "=== Service Connectivity Check ==="
      SERVICE_FQDN="{{ include "ssh-workspace.fullname" . }}.{{ .Release.Namespace }}.svc.cluster.local"
      echo "Testing service: $SERVICE_FQDN:{{ .Values.service.port }}"
      
      if nc -z "$SERVICE_FQDN" {{ .Values.service.port }}; then
        echo "✅ Service is reachable"
        
        # Try to get SSH banner
        echo "SSH service banner:"
        timeout 5 sh -c "echo | nc $SERVICE_FQDN {{ .Values.service.port }}" | head -1 || echo "No banner received"
      else
        echo "❌ Service is not reachable"
        echo "Service details:"
        kubectl get service {{ include "ssh-workspace.fullname" . }} -o yaml
      fi
      
      echo "=== Diagnosis Complete ==="
      echo "✅ SSH server diagnosis test completed successfully"
      
    resources:
      limits:
        cpu: 300m
        memory: 256Mi
      requests:
        cpu: 150m
        memory: 128Mi
{{- end }}