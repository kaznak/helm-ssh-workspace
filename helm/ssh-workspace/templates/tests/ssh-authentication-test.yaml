{{- if and .Values.tests.sshConnectivity.enabled .Values.ssh.testKeys.enabled }}
apiVersion: v1
kind: Pod
metadata:
  name: {{ include "ssh-workspace.fullname" . }}-ssh-auth-test
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "ssh-workspace.labels" . | nindent 4 }}
    app.kubernetes.io/component: test
  annotations:
    "helm.sh/hook": test
    "helm.sh/hook-weight": "10"
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
spec:
  restartPolicy: Never
  serviceAccountName: {{ include "ssh-workspace.fullname" . }}-test
  containers:
  - name: ssh-authentication-test
    image: alpine:3.18
    command:
    - /bin/sh
    - -c
    - |
      set -e  # Exit on any command failure (but with proper error handling)
      
      echo "=== SSH Authentication Test Started ==="
      echo "Timestamp: $(date)"
      echo "Pod: $(hostname)"
      
      # Validate required tools with detailed error messages
      echo "Installing required packages..."
      if ! apk add --no-cache openssh-client netcat-openbsd; then
        echo "ERROR: Failed to install required packages"
        echo "Available packages:"
        apk search openssh || true
        exit 1
      fi
      
      # Validate volume mount with detailed error messages
      echo "Validating test SSH keys..."
      if [ ! -d /test-ssh-keys ]; then
        echo "ERROR: test-ssh-keys volume not mounted"
        echo "Volume mounts:"
        mount | grep test || echo "No test volumes found"
        exit 1
      fi
      
      if [ ! -f /test-ssh-keys/test-key-0 ]; then
        echo "ERROR: test-key-0 not found"
        echo "Available files in /test-ssh-keys:"
        ls -la /test-ssh-keys/ || echo "Cannot list files"
        exit 1
      fi
      
      # Phase 1: Basic TCP Connection Test
      echo "=== Phase 1: Basic TCP Connection Test ==="
      SERVICE_FQDN="{{ include "ssh-workspace.fullname" . }}.{{ .Release.Namespace }}.svc.cluster.local"
      echo "Testing TCP connection to: $SERVICE_FQDN:{{ .Values.service.port }}"
      
      # Test TCP connection
      if ! nc -z "$SERVICE_FQDN" {{ .Values.service.port }}; then
        echo "❌ ERROR: Cannot establish TCP connection to SSH service"
        echo "Service resolution test:"
        nslookup "$SERVICE_FQDN" || echo "DNS resolution failed"
        echo "Network interfaces:"
        ip addr show || echo "ip command not available"
        exit 1
      fi
      echo "✅ TCP connection successful"
      
      # Test SSH protocol response
      echo "Testing SSH protocol response..."
      timeout 10 ssh -o BatchMode=yes -o ConnectTimeout=5 -o StrictHostKeyChecking=no \
        {{ .Values.user.name }}@"$SERVICE_FQDN" \
        -p {{ .Values.service.port }} echo "SSH test" 2>&1 | grep -q "Permission denied" || {
        echo "✅ SSH protocol is responding correctly"
      }
      
      # Phase 2: SSH Service Readiness Check
      echo "=== Phase 2: SSH Service Readiness Check ==="
      echo "Waiting for SSH service to be fully ready: $SERVICE_FQDN:{{ .Values.service.port }}"
      
      # Wait up to 60 seconds for service to become available
      for i in $(seq 1 60); do
        if nc -z "$SERVICE_FQDN" {{ .Values.service.port }}; then
          echo "SSH service is ready after ${i} seconds"
          break
        fi
        if [ $i -eq 60 ]; then
          echo "ERROR: SSH service not ready after 60 seconds"
          echo "Service resolution test:"
          nslookup "$SERVICE_FQDN" || echo "DNS resolution failed"
          echo "Service endpoint status:"
          echo "Full service name being tested: $SERVICE_FQDN"
          echo "Network interfaces:"
          ip addr show || echo "ip command not available"
          exit 1
        fi
        echo "Waiting... (attempt $i/60)"
        sleep 1
      done
      
      # Phase 3: SSH Key Authentication Test
      echo "=== Phase 3: SSH Key Authentication Test ==="
      echo "Test SSH key fingerprint:"
      ssh-keygen -l -f /test-ssh-keys/test-key-0 || echo "Failed to get private key fingerprint"
      ssh-keygen -l -f /test-ssh-keys/test-key-0.pub || echo "Failed to get public key fingerprint"
      
      echo "Test SSH key content (first 50 chars):"
      head -c 50 /test-ssh-keys/test-key-0.pub && echo "..."
      
      echo "=== Remote SSH Configuration Diagnosis ==="
      # Test if we can reach the SSH service and get version
      echo "Testing SSH service banner:"
      timeout 5 nc "$SERVICE_FQDN" {{ .Values.service.port }} <<< "" | head -1 || echo "No SSH banner received"
      
      # Perform SSH key-based authentication test
      echo "=== SSH Authentication Test ==="
      chmod 600 /test-ssh-keys/test-key-0
      
      # First attempt: normal connection
      echo "Attempting SSH connection..."
      if ssh -i /test-ssh-keys/test-key-0 \
          -o StrictHostKeyChecking=no \
          -o UserKnownHostsFile=/dev/null \
          -o ConnectTimeout=10 \
          -o BatchMode=yes \
          -o PasswordAuthentication=no \
          testuser@"$SERVICE_FQDN" -p {{ .Values.service.port }} \
          'echo "SSH authentication successful"' 2>/dev/null; then
        echo "✅ SSH authentication test PASSED"
      else
        echo "❌ SSH authentication failed - Starting detailed diagnosis..."
        
        echo "=== Detailed SSH Debug Information ==="
        echo "Full SSH debug output:"
        ssh -i /test-ssh-keys/test-key-0 \
            -o StrictHostKeyChecking=no \
            -o UserKnownHostsFile=/dev/null \
            -o ConnectTimeout=10 \
            -o BatchMode=yes \
            -o PasswordAuthentication=no \
            -o LogLevel=DEBUG3 \
            testuser@"$SERVICE_FQDN" -p {{ .Values.service.port }} \
            'echo test' 2>&1 | tail -30 || true
        
        echo "=== Remote authorized_keys Investigation ==="
        # Try to get remote authorized_keys via different methods
        echo "Attempting to check remote authorized_keys configuration..."
        
        # Use simple commands to check remote state without requiring full auth
        echo "Testing different connection approaches:"
        
        # Test 1: Try with verbose output to see what's happening
        echo "Test 1 - Connection attempt with full verbose:"
        timeout 15 ssh -i /test-ssh-keys/test-key-0 \
            -o StrictHostKeyChecking=no \
            -o UserKnownHostsFile=/dev/null \
            -o ConnectTimeout=5 \
            -o BatchMode=yes \
            -o PasswordAuthentication=no \
            -v \
            testuser@"$SERVICE_FQDN" -p {{ .Values.service.port }} \
            'pwd' 2>&1 | grep -E "(debug1|Permission|auth|key)" | head -10 || echo "Verbose connection failed"
        
        # Test 2: Try to connect to see what auth methods are offered
        echo "Test 2 - SSH auth methods offered by server:"
        timeout 10 ssh -o BatchMode=yes \
            -o ConnectTimeout=5 \
            -o StrictHostKeyChecking=no \
            -o UserKnownHostsFile=/dev/null \
            testuser@"$SERVICE_FQDN" -p {{ .Values.service.port }} \
            2>&1 | grep -i "auth\|permission\|method" | head -5 || echo "Could not determine auth methods"
        
        echo "=== Key Format and Compatibility Check ==="
        echo "Key type analysis:"
        file /test-ssh-keys/test-key-0 /test-ssh-keys/test-key-0.pub || true
        
        echo "Public key format validation:"
        ssh-keygen -l -f /test-ssh-keys/test-key-0.pub | cut -d' ' -f1-2 || echo "Invalid key format"
        
        exit 1
      fi
      
      echo "=== SSH Authentication Test Completed Successfully ==="
      echo "Timestamp: $(date)"
      
    volumeMounts:
    - name: test-ssh-keys
      mountPath: /test-ssh-keys
      readOnly: true
    resources:
      limits:
        cpu: 300m
        memory: 256Mi
      requests:
        cpu: 150m
        memory: 128Mi
  
  volumes:
  - name: test-ssh-keys
    secret:
      secretName: {{ include "ssh-workspace.fullname" . }}-test-ssh-keys
      defaultMode: 0600
{{- end }}