apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "ssh-workspace.fullname" . }}
  labels:
    {{- include "ssh-workspace.labels" . | nindent 4 }}
spec:
  # Fixed replicas [see:J8R2-DEPLOY]
  replicas: {{ .Values.replicaCount }}
  # Update strategy [see:Y3S2-DOWN]
  strategy:
    {{- toYaml .Values.updateStrategy | nindent 4 }}
  selector:
    matchLabels:
      {{- include "ssh-workspace.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      annotations:
        {{- with .Values.podAnnotations }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
        # Force pod restart when secrets change [see:Z8Y4-RESTART]
        {{- if not .Values.ssh.publicKeys.secretName }}
        checksum/ssh-pubkeys: {{ include (print $.Template.BasePath "/secret-pubkeys.yaml") . | sha256sum }}
        {{- end }}
        {{- if and (not .Values.ssh.privateKeys.secretName) (or .Values.ssh.privateKeys.secretName .Values.ssh.privateKeys.keys) }}
        checksum/ssh-privkeys: {{ include (print $.Template.BasePath "/secret-privkeys.yaml") . | sha256sum }}
        {{- end }}
        # For host keys, we always check the generated secret name
        checksum/config: {{ printf "%s-%s-%s" (.Values.ssh.hostKeys.secretName | default (printf "%s-ssh-hostkeys" (include "ssh-workspace.fullname" .))) (.Values.ssh.publicKeys.secretName | default (printf "%s-ssh-pubkeys" (include "ssh-workspace.fullname" .))) (.Values.ssh.privateKeys.secretName | default (printf "%s-ssh-privkeys" (include "ssh-workspace.fullname" .))) | sha256sum }}
      labels:
        {{- include "ssh-workspace.labels" . | nindent 8 }}
        {{- with .Values.podLabels }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "ssh-workspace.serviceAccountName" . }}
      # Pod security context
      securityContext:
        {{- toYaml .Values.mainPodSecurityContext | nindent 8 }}
      {{- if .Values.userManagement.configMapBased.enabled }}
      # Init container for ConfigMap-based user management [see:U4N8-USERDB]
      initContainers:
        - name: init-users
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          # Init container requires root for /etc file modification
          securityContext:
            {{- toYaml .Values.initSecurityContext | nindent 12 }}
          command:
            - /opt/ssh-workspace/bin/init-users.sh
          args:
            - /etc-new
          env:
            - name: USER_CONFIG_DIR
              value: "/config/users"
            - name: CONTAINER_TOOLS_ENABLED
              value: {{ .Values.containerTools.enabled | quote }}
            - name: SSH_USERNAME
              value: {{ .Values.user.name | quote }}
            - name: SSH_UID
              value: {{ .Values.user.uid | quote }}
            - name: SSH_GID
              value: {{ .Values.user.gid | quote }}
          volumeMounts:
            # User configuration from ConfigMap
            - name: user-config
              mountPath: /config/users
              readOnly: true
            # Shared /etc volume for user database
            - name: etc-overlay
              mountPath: /etc-new
            # Home directory mount for ownership setup
            - name: home
              mountPath: /home/{{ .Values.user.name }}
          resources:
            {{- toYaml .Values.jobResources.userInit | nindent 12 }}
      {{- end }}
      containers:
        - name: {{ .Chart.Name }}
          # Container security context
          securityContext:
            {{- if .Values.userManagement.configMapBased.enabled }}
            # Enhanced security for ConfigMap-based user management
            runAsUser: {{ .Values.user.uid }}
            runAsGroup: {{ .Values.user.gid }}
            runAsNonRoot: true
            allowPrivilegeEscalation: false
            capabilities:
              drop: ["ALL"]
            readOnlyRootFilesystem: false  # SSH needs to write to user home
            {{- else }}
            # Fallback to root mode if ConfigMap mode not enabled
            {{- toYaml .Values.mainSecurityContext | nindent 12 }}
            {{- end }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          # Environment variables for user configuration [see:Y4F1-USER]
          env:
            - name: SSH_USERNAME
              value: {{ .Values.user.name | quote }}
            - name: SSH_UID
              value: {{ .Values.user.uid | quote }}
            - name: SSH_GID
              value: {{ .Values.user.gid | quote }}
            - name: SSH_PORT
              value: {{ .Values.ssh.port | quote }}
            # Container tools configuration [see:H9L2-PODMAN]
            - name: CONTAINER_TOOLS_ENABLED
              value: {{ .Values.containerTools.enabled | quote }}
          # Override entrypoint to run SSH server startup script
          command:
            - /opt/ssh-workspace/bin/start-ssh-server.sh
          ports:
            - name: ssh
              containerPort: {{ .Values.ssh.port }}
              protocol: TCP
          # Health checks [see:Q1P4-HEALTH]
          # To avoid spamming to logs of probles, we use exec probes instead of tcpsocket probes
          {{- if .Values.healthCheck.livenessProbe.enabled }}
          livenessProbe:
            exec:
              command:
                - /opt/ssh-workspace/bin/health-check.sh
                - liveness
            initialDelaySeconds: {{ .Values.healthCheck.livenessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.healthCheck.livenessProbe.periodSeconds }}
            timeoutSeconds: {{ .Values.healthCheck.livenessProbe.timeoutSeconds }}
            failureThreshold: {{ .Values.healthCheck.livenessProbe.failureThreshold }}
            successThreshold: {{ .Values.healthCheck.livenessProbe.successThreshold }}
          {{- end }}
          {{- if .Values.healthCheck.readinessProbe.enabled }}
          readinessProbe:
            exec:
              command:
                - /opt/ssh-workspace/bin/health-check.sh
                - readiness
            initialDelaySeconds: {{ .Values.healthCheck.readinessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.healthCheck.readinessProbe.periodSeconds }}
            timeoutSeconds: {{ .Values.healthCheck.readinessProbe.timeoutSeconds }}
            failureThreshold: {{ .Values.healthCheck.readinessProbe.failureThreshold }}
            successThreshold: {{ .Values.healthCheck.readinessProbe.successThreshold }}
          {{- end }}
          # Resource limits [see:J1X6-LIMIT]
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
          # Volume mounts
          volumeMounts:
            # Home directory mount [see:V5Q3-HOME]
            - name: home
              mountPath: /home/{{ .Values.user.name }}
              {{- if and (eq .Values.homeDirectory.type "persistentVolume") .Values.homeDirectory.persistentVolume.subPath }}
              subPath: {{ .Values.homeDirectory.persistentVolume.subPath }}
              {{- end }}
            {{- if .Values.userManagement.configMapBased.enabled }}
            # Mount individual user database files from init container [see:U4N8-USERDB]
            - name: etc-overlay
              mountPath: /etc/passwd
              subPath: passwd
            - name: etc-overlay
              mountPath: /etc/group
              subPath: group
            - name: etc-overlay
              mountPath: /etc/shadow
              subPath: shadow
            {{- end }}
            # SSH host keys mount (read from mounted secrets)
            - name: ssh-host-keys
              mountPath: /mnt/ssh-host-keys
              readOnly: true
            # SSH public keys mount (read from mounted secrets)
            - name: ssh-public-keys
              mountPath: /mnt/ssh-public-keys
              readOnly: true
            # SSH private keys mount (if configured)
            {{- if or .Values.ssh.privateKeys.secretName .Values.ssh.privateKeys.keys }}
            - name: ssh-private-keys
              mountPath: /mnt/ssh-private-keys
              readOnly: true
            {{- end }}
      volumes:
        # Home directory volume [see:V5Q3-HOME]
        - name: home
          {{- if eq .Values.homeDirectory.type "persistentVolume" }}
          persistentVolumeClaim:
            {{- if .Values.homeDirectory.persistentVolume.existingClaim }}
            claimName: {{ .Values.homeDirectory.persistentVolume.existingClaim }}
            {{- else }}
            claimName: {{ include "ssh-workspace.fullname" . }}-home
            {{- end }}
          {{- else }}
          emptyDir:
            {{- if .Values.homeDirectory.emptyDir.sizeLimit }}
            sizeLimit: {{ .Values.homeDirectory.emptyDir.sizeLimit }}
            {{- end }}
          {{- end }}
        # SSH host keys volume [see:W5X2-SECRET]
        - name: ssh-host-keys
          secret:
            secretName: {{ .Values.ssh.hostKeys.secretName | default (printf "%s-ssh-hostkeys" (include "ssh-workspace.fullname" .)) }}
        # SSH public keys volume [see:P5Q8-PUBKEY]
        - name: ssh-public-keys
          secret:
            secretName: {{ .Values.ssh.publicKeys.secretName | default (printf "%s-ssh-pubkeys" (include "ssh-workspace.fullname" .)) }}
        # SSH private keys volume [see:R2L7-PRIVKEY]
        {{- if or .Values.ssh.privateKeys.secretName .Values.ssh.privateKeys.keys }}
        - name: ssh-private-keys
          secret:
            secretName: {{ .Values.ssh.privateKeys.secretName | default (printf "%s-ssh-privkeys" (include "ssh-workspace.fullname" .)) }}
        {{- end }}
        {{- if .Values.userManagement.configMapBased.enabled }}
        # User configuration from ConfigMap [see:U4N8-USERDB]
        - name: user-config
          configMap:
            name: {{ include "ssh-workspace.fullname" . }}-users
        # Shared /etc volume for user database
        - name: etc-overlay
          emptyDir: {}
        {{- end }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}