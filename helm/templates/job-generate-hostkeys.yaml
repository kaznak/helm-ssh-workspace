{{- if .Values.ssh.hostKeys.autoGenerate }}
apiVersion: v1
kind: ServiceAccount
metadata:
  name: {{ include "ssh-workspace.fullname" . }}-hostkey-generator
  labels:
    {{- include "ssh-workspace.labels" . | nindent 4 }}
  annotations:
    "helm.sh/hook": "pre-install,pre-upgrade"
    "helm.sh/hook-weight": "-2"
    "helm.sh/hook-delete-policy": "before-hook-creation,hook-succeeded"
automountServiceAccountToken: true
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: {{ include "ssh-workspace.fullname" . }}-hostkey-generator
  labels:
    {{- include "ssh-workspace.labels" . | nindent 4 }}
  annotations:
    "helm.sh/hook": "pre-install,pre-upgrade"
    "helm.sh/hook-weight": "-2"
    "helm.sh/hook-delete-policy": "before-hook-creation,hook-succeeded"
rules:
- apiGroups: [""]
  resources: ["secrets"]
  verbs: ["get", "list", "create", "update", "patch"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: {{ include "ssh-workspace.fullname" . }}-hostkey-generator
  labels:
    {{- include "ssh-workspace.labels" . | nindent 4 }}
  annotations:
    "helm.sh/hook": "pre-install,pre-upgrade"
    "helm.sh/hook-weight": "-2"
    "helm.sh/hook-delete-policy": "before-hook-creation,hook-succeeded"
subjects:
- kind: ServiceAccount
  name: {{ include "ssh-workspace.fullname" . }}-hostkey-generator
  namespace: {{ .Release.Namespace }}
roleRef:
  kind: Role
  name: {{ include "ssh-workspace.fullname" . }}-hostkey-generator
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ include "ssh-workspace.fullname" . }}-generate-hostkeys
  labels:
    {{- include "ssh-workspace.labels" . | nindent 4 }}
  annotations:
    "helm.sh/hook": "pre-install,pre-upgrade"
    "helm.sh/hook-weight": "-1"
    "helm.sh/hook-delete-policy": "before-hook-creation,hook-succeeded"
spec:
  template:
    metadata:
      labels:
        {{- include "ssh-workspace.selectorLabels" . | nindent 8 }}
    spec:
      serviceAccountName: {{ include "ssh-workspace.fullname" . }}-hostkey-generator
      restartPolicy: OnFailure
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      containers:
      - name: hostkey-generator
        image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        securityContext:
          {{- toYaml .Values.securityContext | nindent 10 }}
        command:
        - /bin/bash
        - -c
        - |
          set -e
          
          SECRET_NAME="{{ .Values.ssh.hostKeys.secretName | default (printf "%s-ssh-hostkeys" (include "ssh-workspace.fullname" .)) }}"
          NAMESPACE="{{ .Release.Namespace }}"
          
          # Check if secret already exists
          if kubectl get secret "$SECRET_NAME" -n "$NAMESPACE" >/dev/null 2>&1; then
            echo "INFO: SSH host keys secret already exists: $SECRET_NAME"
            exit 0
          fi
          
          echo "Generating SSH host keys..."
          
          # Generate keys
          /opt/ssh-workspace/bin/generate-host-keys.sh
          
          # Create secret with generated keys
          kubectl create secret generic "$SECRET_NAME" \
            --from-file=rsa_host_key=/etc/dropbear/dropbear_rsa_host_key \
            --from-file=ed25519_host_key=/etc/dropbear/dropbear_ed25519_host_key \
            -n "$NAMESPACE"
          
          # Add resource policy annotation for persistence [R8N9-REUSE]
          kubectl annotate secret "$SECRET_NAME" \
            "helm.sh/resource-policy=keep" \
            -n "$NAMESPACE"
          
          echo "SSH host keys secret created successfully: $SECRET_NAME"
        env:
        - name: KUBECONFIG
          value: /var/run/secrets/kubernetes.io/serviceaccount/kubeconfig
        volumeMounts:
        - name: temp-keys
          mountPath: /etc/dropbear
      volumes:
      - name: temp-keys
        emptyDir: {}
{{- end }}